// Generated by Apple Swift version 4.1 effective-3.3 (swiftlang-902.0.48 clang-902.0.37.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import FlybitsSDK;
@import CoreLocation;
@import CoreBluetooth;
@import CoreData;
@import Foundation;
@import UIKit;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FlybitsContextSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSError;

SWIFT_PROTOCOL("_TtP17FlybitsContextSDK13ContextPlugin_")
@protocol ContextPlugin <NSObject>
/// The category of context in which the data provided is stored, i.e. flybits.ctx.location
@property (nonatomic, readonly, copy) NSString * _Nonnull pluginID;
/// The frequency at which this context plugin is polled for data.
/// <em>NOTE: nil implies this Context Plugin will push data to the <code>ContextManager</code></em>
@property (nonatomic) NSInteger refreshTime;
/// The time unit (<code>TimeUnit</code>) for the <code>refreshTime</code>.
@property (nonatomic) FlybitsUtilitiesTimeUnit timeUnit;
/// This function is called when the <code>refreshTime</code> has elapsed.
/// <em>NOTE: If this object is not polled (<code>refreshTime = nil</code>), this method is not called.</em>
/// \param completion The completion that will provide the <code>ContextManager</code> with data or an error as appropriate.
///
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS("_TtC17FlybitsContextSDK21ActivityContextPlugin")
@interface ActivityContextPlugin : NSObject <ContextPlugin>
/// The category of context in which the data provided is stored, i.e. flybits.ctx.location
@property (nonatomic, readonly, copy) NSString * _Nonnull pluginID;
/// The frequency at which this context plugin is polled for data.
/// <em>NOTE: nil implies this Context Plugin will push data to the <code>ContextManager</code></em>
@property (nonatomic) NSInteger refreshTime;
/// The time unit (<code>TimeUnit</code>) for the <code>refreshTime</code>.
@property (nonatomic) FlybitsUtilitiesTimeUnit timeUnit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)startUpdates;
- (void)stopUpdates;
/// Retrieves battery information including percentage and whether or not the device is charging.
/// \param completion A completion called by the <code>ContextManager</code> to update the latest data.
///
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
@end

/// Defines errors that can occur with the <code>UserActivityContextPlugin</code>.
typedef SWIFT_ENUM(NSInteger, ActivityContextPluginError) {
/// Activity data is not available
  ActivityContextPluginErrorActivityUnavailable = 0,
/// No activity data available
  ActivityContextPluginErrorNoData = 1,
};
static NSString * _Nonnull const ActivityContextPluginErrorDomain = @"FlybitsContextSDK.ActivityContextPluginError";

/// Beacon type to auto register when enabling auto start context collection.
typedef SWIFT_ENUM(NSInteger, AutoRegisterBeaconType) {
  AutoRegisterBeaconTypeIBeacon = 0,
  AutoRegisterBeaconTypeEddystone = 1,
  AutoRegisterBeaconTypeAll = 2,
};


SWIFT_CLASS("_TtC17FlybitsContextSDK25AvailabilityContextPlugin")
@interface AvailabilityContextPlugin : NSObject <ContextPlugin>
/// The category of context in which the data provided is stored, i.e. flybits.ctx.location
@property (nonatomic, readonly, copy) NSString * _Nonnull pluginID;
/// The frequency at which this context plugin is polled for data.
/// <em>NOTE: nil implies this Context Plugin will push data to the <code>ContextManager</code></em>
@property (nonatomic) NSInteger refreshTime;
/// The time unit (<code>TimeUnit</code>) for the <code>refreshTime</code>.
@property (nonatomic) FlybitsUtilitiesTimeUnit timeUnit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Retrieves battery information including percentage and whether or not the device is charging.
/// \param completion A completion called by the <code>ContextManager</code> to update the latest data.
///
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
@end

/// Defines errors that can occur with the <code>ScheduleContextPlugin</code>.
typedef SWIFT_ENUM(NSInteger, AvailabilityContextPluginError) {
/// Calendar access is not authorized
  AvailabilityContextPluginErrorCalendarAccessUnauthorized = 0,
};
static NSString * _Nonnull const AvailabilityContextPluginErrorDomain = @"FlybitsContextSDK.AvailabilityContextPluginError";


/// The <code>BatteryContextPlugin</code> provides information about the device’s battery percentage and whether or not it is charging.
SWIFT_CLASS("_TtC17FlybitsContextSDK20BatteryContextPlugin")
@interface BatteryContextPlugin : NSObject <ContextPlugin>
/// The category of context in which the data provided is stored, i.e. flybits.ctx.location
/// The category of context in which the data provided is stored, i.e. ctx.sdk.location
@property (nonatomic, readonly, copy) NSString * _Nonnull pluginID;
/// The frequency at which this context plugin is polled for data.
/// <em>NOTE: nil implies this Context Plugin will push data to the <code>ContextManager</code></em>
@property (nonatomic) NSInteger refreshTime;
/// The time unit (<code>TimeUnit</code>) for the <code>refreshTime</code>.
@property (nonatomic) FlybitsUtilitiesTimeUnit timeUnit;
/// Retrieves battery information including percentage and whether or not the device is charging.
/// \param completion A completion called by the <code>ContextManager</code> to update the latest data.
///
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17FlybitsContextSDK6Beacon")
@interface Beacon : NSObject
@property (nonatomic, readonly) NSInteger strength;
@property (nonatomic, readonly) CLLocationDistance distance;
@property (nonatomic, readonly) NSInteger batteryLevel;
@property (nonatomic, readonly) BOOL inRange;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull beaconType;)
+ (NSString * _Nonnull)beaconType SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithStrength:(NSInteger)strength distance:(CLLocationDistance)distance batteryVoltage:(uint16_t)batteryVoltage inRange:(BOOL)inRange OBJC_DESIGNATED_INITIALIZER;
- (void)update:(Beacon * _Nonnull)other;
+ (NSInteger)calculateBatteryPercentage:(uint16_t)voltage SWIFT_WARN_UNUSED_RESULT;
+ (CLLocationDistance)calculateDistance:(NSInteger)txPower RSSI:(NSInteger)RSSI SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class MonitoredBeacon;

SWIFT_CLASS("_TtC17FlybitsContextSDK19BeaconContextPlugin")
@interface BeaconContextPlugin : NSObject <ContextPlugin>
/// The category of context in which the data provided is stored, i.e. flybits.ctx.location
@property (nonatomic, readonly, copy) NSString * _Nonnull pluginID;
/// The frequency at which this context plugin is polled for data.
/// <em>NOTE: nil implies this Context Plugin will push data to the <code>ContextManager</code></em>
@property (nonatomic) NSInteger refreshTime;
/// The time unit (<code>TimeUnit</code>) for the <code>refreshTime</code>.
@property (nonatomic) FlybitsUtilitiesTimeUnit timeUnit;
/// The frequency at which the beacon list will be refreshed
@property (nonatomic) NSInteger beaconPollFrequency;
- (nonnull instancetype)initWithApiFrequency:(NSInteger)apiFrequency OBJC_DESIGNATED_INITIALIZER;
- (void)startMonitoring:(NSArray<MonitoredBeacon *> * _Nonnull)monitoredBeacons;
- (void)stopMonitoring:(NSArray<MonitoredBeacon *> * _Nonnull)monitoredBeacons;
- (void)startBeaconQuery;
- (void)stopBeaconQuery;
/// Retrieves battery information including percentage and whether or not the device is charging.
/// \param completion A completion called by the <code>ContextManager</code> to update the latest data.
///
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class CBCentralManager;
@class CBPeripheral;
@class NSNumber;

SWIFT_CLASS("_TtC17FlybitsContextSDK13BeaconManager")
@interface BeaconManager : NSObject <CBCentralManagerDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BeaconManager * _Nonnull shared;)
+ (BeaconManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL isScanning;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
@end

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS("_TtC17FlybitsContextSDK13CTX_Condition")
@interface CTX_Condition : NSManagedObject
- (nonnull instancetype)initWithLhs:(NSString * _Nonnull)lhs rhs:(NSString * _Nonnull)rhs weight:(double)weight op:(NSString * _Nonnull)op post:(NSString * _Nullable)post entity:(NSEntityDescription * _Nullable)entity context:(NSManagedObjectContext * _Nullable)context;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC17FlybitsContextSDK8CTX_Data")
@interface CTX_Data : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC17FlybitsContextSDK8CTX_Rule")
@interface CTX_Rule : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC17FlybitsContextSDK20CarrierContextPlugin")
@interface CarrierContextPlugin : NSObject <ContextPlugin>
/// The category of context in which the data provided is stored, i.e. flybits.ctx.location
@property (nonatomic, readonly, copy) NSString * _Nonnull pluginID;
/// The frequency at which this context plugin is polled for data.
/// <em>NOTE: nil implies this Context Plugin will push data to the <code>ContextManager</code></em>
@property (nonatomic) NSInteger refreshTime;
/// The time unit (<code>TimeUnit</code>) for the <code>refreshTime</code>.
@property (nonatomic) FlybitsUtilitiesTimeUnit timeUnit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Retrieves battery information including percentage and whether or not the device is charging.
/// \param completion A completion called by the <code>ContextManager</code> to update the latest data.
///
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
@end

/// Defines errors that can occur with the <code>CellularCarrierContextPlugin</code>.
typedef SWIFT_ENUM(NSInteger, CarrierContextPluginError) {
/// No carrier available
  CarrierContextPluginErrorNoCarrierError = 0,
};
static NSString * _Nonnull const CarrierContextPluginErrorDomain = @"FlybitsContextSDK.CarrierContextPluginError";


/// Condition represents a simple equation that will be evalued by the rules to consider
/// whether or not the rule is valid.
SWIFT_CLASS("_TtC17FlybitsContextSDK9Condition")
@interface Condition : NSObject
/// left hand side of the equation
@property (nonatomic, copy) NSString * _Nullable lhs;
/// right hand side of the equation
@property (nonatomic, copy) NSString * _Nullable rhs;
/// Operator to evaluate lhs and rhs
@property (nonatomic, copy) NSString * _Nullable op;
/// Any post condition
@property (nonatomic, copy) NSString * _Nullable post;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class FlybitsRequest;
@class RulesQuery;
@class Rule;
@class Pager;

/// ContextAPIManager is a wrapper for use with Objective-C based projects.
/// All Swift based projects should use the Requestable enums such as SessionRequest, ZoneRequest or UserRequest.
SWIFT_CLASS("_TtC17FlybitsContextSDK17ContextAPIManager")
@interface ContextAPIManager : NSObject
/// Sends properly formatted, custom context data to Flybits’ context servers.
/// \param contextData A properly formatted dictionary of data intended for Flybits’ context servers.
///
/// \param completion A completion that returns errors if applicable.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
+ (FlybitsRequest * _Nonnull)sendContextData:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)contextData withCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Makes a query to retreive Rules.
/// \param query RulesQuery The Query object. Includes criteria to use for querying.
///
/// \param completion callback that returns Array of <code>Rule</code>s with pagination, an error otherwise.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
+ (FlybitsRequest * _Nonnull)rulesFilteredByQuery:(RulesQuery * _Nonnull)query withCompletion:(void (^ _Nonnull)(NSArray<Rule *> * _Nullable, Pager * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Requests a specific Rule by ID.
/// \param by The ID of the Rule to retrieve.
///
/// \param completion callback that returns a <code>Rule</code> on success, an error on failure.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
+ (FlybitsRequest * _Nonnull)getRuleWithID:(NSString * _Nonnull)ruleID withCompletion:(void (^ _Nonnull)(Rule * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>Rule</code> on the server with the provided object.
/// \param rule The <code>Rule</code> to register with the server.
///
/// \param completion callback that returns a <code>Rule</code> on success, an error on failure.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
+ (FlybitsRequest * _Nonnull)createRule:(Rule * _Nonnull)rule withCompletion:(void (^ _Nonnull)(Rule * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Deletes an existing <code>Rule</code> on the server.
/// \param with The unique identifier of a <code>Rule</code> to delete from the server.
///
/// \param completion A callback containing an error if applicable.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
+ (FlybitsRequest * _Nonnull)deleteRuleWithID:(NSString * _Nonnull)ruleID withCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Defines some of the error that can be return by Flybits when using
/// ContextManager.
typedef SWIFT_ENUM(NSInteger, ContextError) {
/// Error sending context plugin data
  ContextErrorGeneralContextDataSendError = 0,
/// Same context plugin is already registered
  ContextErrorContextPluginAlreadyExists = 1,
/// Context plugin cannot be created
  ContextErrorUnableToCreateContextPlugin = 2,
/// Context entity is not supported
  ContextErrorEntityNotSupported = 3,
/// Invalid context plugin data
  ContextErrorInvalidData = 4,
/// Context plugin is not available for this device or is disabled
  ContextErrorNotAvailable = 5,
};
static NSString * _Nonnull const ContextErrorDomain = @"FlybitsContextSDK.ContextError";

enum ReservedContextPlugin : NSInteger;

/// The <code>ContextManager</code> allows for various pieces of context data to be registered for upload to the Flybits servers.
SWIFT_CLASS("_TtC17FlybitsContextSDK14ContextManager")
@interface ContextManager : NSObject
/// Singleton access to the <code>ContextManager</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ContextManager * _Nonnull shared;)
+ (ContextManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL isPolling;
@property (nonatomic) BOOL sentLatestValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Indicates whether or not the client has any active <code>Rule</code> subscriptions.
///
/// returns:
/// True when at least one <code>Rule</code> has a subscription, False otherwise.
- (BOOL)hasRuleSubscription SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether or not the client has subscribed to a given <code>ruleName</code>.
/// \param ruleName The name of the rule to check for a subscription.
///
- (BOOL)isSubscribedToRule:(NSString * _Nonnull)ruleName SWIFT_WARN_UNUSED_RESULT;
/// Toggles a subscription for a given <code>ruleName</code>. Default behaviour is to subscribe to a <code>Rule</code>.
/// \param ruleName The name of the rule to add or remove a subscription.
///
/// \param subscribe Whether to subscribe to or unsubscribe from a given <code>Rule</code>. Default value is true.
///
- (void)updateRuleSubscription:(NSString * _Nonnull)ruleName subscribe:(BOOL)subscribe;
/// Retrieves the latest rules and their evaluation status.
/// <em>NOTE: Added and/or updated rules are broadcast via NSNotificationCenter.</em>
- (void)refreshRules;
/// Registers a given Custom <code>ContextPlugin</code> with the <code>ContextManager</code>.
/// <em>NOTE: This function must be called from the main thread.</em>
/// \param plugin The custom <code>ContextPlugin</code> instance to register with the <code>ContextManager</code> - will be updated in the instance the plugin exists already.
///
- (id <ContextPlugin> _Nullable)registerContextPlugin:(id <ContextPlugin> _Nonnull)plugin withError:(NSError * _Nullable * _Nullable)error;
/// Registers a given <code>ReservedContextPlugin</code> with the <code>ContextManager</code> that indicates the polling frequency as well as the upload frequency.
/// <em>NOTE: If the plugin already exists, the plugin is updated – with new values for refreshTime and, priority and active is set to ‘true’ stored in core data.</em>
/// <em>NOTE: This function must be called from the main thread.</em>
/// \param plugin The <code>ReservedContextPlugin</code> to register with the <code>ContextManager</code> - will be updated in the instance the plugin exists already.
///
- (id <ContextPlugin> _Nullable)registerReservedContextPlugin:(enum ReservedContextPlugin)plugin refreshTime:(NSInteger)refreshTime timeUnit:(FlybitsUtilitiesTimeUnit)timeUnit;
- (id <ContextPlugin> _Nullable)retrieveReservedContextPlugin:(enum ReservedContextPlugin)plugin SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeContextPlugin:(id <ContextPlugin> _Nonnull)plugin;
- (BOOL)removeReservedContextPlugin:(enum ReservedContextPlugin)plugin;
@end


/// Constants for various rule and context actions.
SWIFT_CLASS("_TtC17FlybitsContextSDK23ContextManagerConstants")
@interface ContextManagerConstants : NSObject
/// <code>com.flybits.context.rule</code> This is the key for the rule object passed via a given Added or Changed notification.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ContextRule;)
+ (NSString * _Nonnull)ContextRule SWIFT_WARN_UNUSED_RESULT;
/// <code>com.flybits.context.rule.added</code> This is the broadcast topic when a rule is added to the <code>ContextManager</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ContextRuleAdded;)
+ (NSString * _Nonnull)ContextRuleAdded SWIFT_WARN_UNUSED_RESULT;
/// <code>com.flybits.context.rule.changed</code> This is the broadcast topic when a rule’s <code>lastResult</code> has changed.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ContextRuleChanged;)
+ (NSString * _Nonnull)ContextRuleChanged SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@protocol NSCoding;
@class User;
@class NSCoder;

/// The <code>ContextScope</code> class is responsible for managing Context options when initializing
/// the Context SDK. This is a primary step to configure and define attributes that are required for
/// context processing.
SWIFT_CLASS("_TtC17FlybitsContextSDK12ContextScope")
@interface ContextScope : NSObject <FlybitsScope>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id <ContextPlugin>> * _Nullable pluginTypes;
/// Checks if context collection is set to auto start
@property (nonatomic, readonly) BOOL autoStartContextCollection;
/// Beacon type to auto register when enabling auto start context collection.
/// Defaults to iBeacon, only applicable when autoStartContextCollection is set to true.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum AutoRegisterBeaconType autoRegisterBeaconType;)
+ (enum AutoRegisterBeaconType)autoRegisterBeaconType SWIFT_WARN_UNUSED_RESULT;
+ (void)setAutoRegisterBeaconType:(enum AutoRegisterBeaconType)value;
/// Checks if user has properly authenticated and connected to Context SDK module
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL authenticated;)
+ (BOOL)authenticated SWIFT_WARN_UNUSED_RESULT;
/// Initializes the <code>ContextScope</code> with a upload frequency for registered Context plugins
/// and also activates uploading of Context data to the Flybits Context Server.
/// \param timeToUploadContext The time to upload Context data to the server.
///
/// \param timeUnit The <code>TimeUnit</code> for the upload frequency.
///
/// \param autoStartContextCollection Sets auto start of context collection. Defaults to false.
///
/// \param pluginTypes The pluginTypes dictionary of unique pluginID key and plugin instance.
/// Used only when auto start context collection is enabled.
/// <em>Note</em> : plugin instance must be NSCoding compliant.
///
- (nonnull instancetype)initWithTimeToUploadContext:(NSInteger)timeToUploadContext timeUnit:(enum FlybitsUtilitiesTimeUnit)timeUnit autoStartContextCollection:(BOOL)autoStartContextCollection pluginTypes:(NSDictionary<NSString *, id <ContextPlugin, NSCoding>> * _Nullable)pluginTypes OBJC_DESIGNATED_INITIALIZER;
/// Scope name for the Context SDK
@property (nonatomic, readonly, copy) NSString * _Nonnull scopeName;
/// Gets called on successfully connecting to the IDP
- (void)onConnectedWithUser:(User * _Nonnull)user;
/// Gets called on disconnecting from the IDP
- (void)onDisconnectedWithJwtToken:(NSString * _Nonnull)jwtToken;
/// Gets called when a user account gets destroyed
- (void)onAccountDestroyedWithJwtToken:(NSString * _Nonnull)jwtToken;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// Get notified when cached data is parsed by the FlybitsSDK
- (void)onCachedDataRetrievedWithData:(id _Nonnull)data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Contextual filter for Rule schedules
typedef SWIFT_ENUM(NSInteger, ContextualFilter) {
  ContextualFilterBefore = 1,
  ContextualFilterAfter = 2,
};

@class CLLocation;
@class CLHeading;
@class CLRegion;
@protocol CoreLocationContextPluginDelegate;
@class CLBeaconRegion;
@class CLLocationManager;
@class CLBeacon;
@class CLVisit;

/// The <code>CoreLocationContextPlugin</code> is responsible for reporting location context data to the context servers. SDK users can allow the <code>CoreLocationContextPlugin</code> to be the primary
SWIFT_CLASS("_TtC17FlybitsContextSDK25CoreLocationContextPlugin")
@interface CoreLocationContextPlugin : NSObject <CLLocationManagerDelegate, ContextPlugin>
@property (nonatomic, readonly) BOOL isCoreLocationManager;
/// If this plugin is managing the <code>CLLocationManager</code> this becomes a readonly passthrough, otherwise the value must be set by an external source.
@property (nonatomic, strong) CLLocation * _Nullable location;
/// If this plugin is managing the <code>CLLocationManager</code> this becomes a readonly passthrough, otherwise the value must be set by an external source.
@property (nonatomic, strong) CLHeading * _Nullable heading;
/// The category of context in which the data provided is stored, i.e. flybits.ctx.location
@property (nonatomic, readonly, copy) NSString * _Nonnull pluginID;
/// The frequency at which this context plugin is polled for data.
/// <em>NOTE: nil implies this Context Plugin will push data to the <code>ContextManager</code></em>
@property (nonatomic) NSInteger refreshTime;
/// The time unit (<code>TimeUnit</code>) for the <code>refreshTime</code>.
@property (nonatomic) FlybitsUtilitiesTimeUnit timeUnit;
/// A passthrough for <code>CLLocationManager</code>’s <code>pausesLocationUpdatesAutomatically</code> property.
@property (nonatomic) BOOL pausesLocationUpdatesAutomatically;
/// A passthrough for <code>CLLocationManager</code>’s <code>distanceFilter</code> property.
@property (nonatomic) CLLocationDistance distanceFilter;
/// A passthrough for <code>CLLocationManager</code>’s <code>desiredAccuracy</code> property.
@property (nonatomic) CLLocationAccuracy desiredAccuracy;
/// A passthrough for <code>CLLocationManager</code>’s <code>activityType</code> property.
@property (nonatomic) CLActivityType activityType;
/// A passthrough for <code>CLLocationManager</code>’s <code>headingFilter</code> property.
@property (nonatomic) CLLocationDegrees headingFilter;
/// A passthrough for <code>CLLocationManager</code>’s <code>headingOrientation</code> property.
@property (nonatomic) CLDeviceOrientation headingOrientation;
/// A passthrough for <code>CLLocationManager</code>’s <code>allowsBackgroundLocationUpdates</code> property.
@property (nonatomic) BOOL allowsBackgroundLocationUpdates;
/// A passthrough for <code>CLLocationManager</code>’s <code>monitoredRegions</code> property.
@property (nonatomic, readonly, copy) NSSet<CLRegion *> * _Nonnull monitoredRegions;
/// A passthrough for <code>CLLocationManager</code>’s <code>maximumRegionMonitoringDistance</code> property.
@property (nonatomic, readonly) CLLocationDistance maximumRegionMonitoringDistance;
/// A passthrough for <code>CLLocationManager</code>’s <code>rangedRegions</code> property.
@property (nonatomic, readonly, copy) NSSet<CLRegion *> * _Nonnull rangedRegions;
/// Creates a <code>CoreLocationContextPlugin</code> for use in recording location context data.
/// \param asCoreLocationManager Indicates whether or not this should be the primary <code>CLLocationManager</code> instance, if <code>false</code> the <code>location</code> and <code>heading</code> properties must be updated externally. Default value is <code>true</code>.
///
/// \param authorization The desired <code>CLAuthorizationStatus</code>. Default value is <code>AuthorizedWhenInUse</code>.
///
- (nonnull instancetype)initAsCoreLocationManager:(BOOL)asCoreLocationManager withRequiredAuthorization:(CLAuthorizationStatus)authorization OBJC_DESIGNATED_INITIALIZER;
/// Adds a delegate to the <code>CoreLocationContextPlugin</code>’s list of delegates.
/// \param delegate A <code>class</code> conforming to the <code>CoreLocationContextPluginDelegate</code> protocol.
///
///
/// returns:
/// <code>true</code> if the delegate was not previously registered, <code>false</code> otherwise.
- (BOOL)addDelegate:(id <CoreLocationContextPluginDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// Removes a delegate from the <code>CoreLocationContextPlugin</code>’s list of delegates.
/// \param delegate A <code>class</code> conforming to the <code>CoreLocationContextPluginDelegate</code> protocol.
///
///
/// returns:
/// <code>true</code> if the delegate was removed successfully, <code>false</code> if the delegate was never registered.
- (BOOL)removeDelegate:(id <CoreLocationContextPluginDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// A passthrough for <code>CLLocationManager</code>’s <code>requestWhenInUseAuthorization</code> function.
- (BOOL)requestWhenInUseAuthorizationAndReturnError:(NSError * _Nullable * _Nullable)error;
/// A passthrough for <code>CLLocationManager</code>’s <code>requestAlwaysAuthorization</code> function.
- (BOOL)requestAlwaysAuthorizationAndReturnError:(NSError * _Nullable * _Nullable)error;
/// A passthrough for <code>CLLocationManager</code>’s <code>startUpdatingLocation</code> function.
- (BOOL)startUpdatingLocationAndReturnError:(NSError * _Nullable * _Nullable)error;
/// A passthrough for <code>CLLocationManager</code>’s <code>stopUpdatingLocation</code> function.
- (BOOL)stopUpdatingLocationAndReturnError:(NSError * _Nullable * _Nullable)error;
/// A passthrough for <code>CLLocationManager</code>’s <code>startMonitoringSignificantLocationChanges</code> function.
- (BOOL)startMonitoringSignificantLocationChangesAndReturnError:(NSError * _Nullable * _Nullable)error;
/// A passthrough for <code>CLLocationManager</code>’s <code>stopMonitoringSignificantLocationChanges</code> function.
- (BOOL)stopMonitoringSignificantLocationChangesAndReturnError:(NSError * _Nullable * _Nullable)error;
/// A passthrough for <code>CLLocationManager</code>’s <code>startUpdatingHeading</code> function.
- (BOOL)startUpdatingHeadingAndReturnError:(NSError * _Nullable * _Nullable)error;
/// A passthrough for <code>CLLocationManager</code>’s <code>stopUpdatingHeading</code> function.
- (BOOL)stopUpdatingHeadingAndReturnError:(NSError * _Nullable * _Nullable)error;
/// A passthrough for <code>CLLocationManager</code>’s <code>dismissHeadingCalibrationDisplay</code> function.
- (BOOL)dismissHeadingCalibrationDisplayAndReturnError:(NSError * _Nullable * _Nullable)error;
/// A passthrough for <code>CLLocationManager</code>’s <code>startMonitoring</code> function.
- (BOOL)startMonitoringFor:(CLRegion * _Nonnull)region error:(NSError * _Nullable * _Nullable)error;
/// A passthrough for <code>CLLocationManager</code>’s <code>stopMonitoring</code> function.
- (BOOL)stopMonitoringFor:(CLRegion * _Nonnull)region error:(NSError * _Nullable * _Nullable)error;
/// A passthrough for <code>CLLocationManager</code>’s <code>startRangingBeacons</code> function.
- (BOOL)startRangingBeaconsIn:(CLBeaconRegion * _Nonnull)region error:(NSError * _Nullable * _Nullable)error;
/// A passthrough for <code>CLLocationManager</code>’s <code>stopRangingBeacons</code> function.
- (BOOL)stopRangingBeaconsIn:(CLBeaconRegion * _Nonnull)region error:(NSError * _Nullable * _Nullable)error;
/// A passthrough for <code>CLLocationManager</code>’s <code>requestState</code> function.
- (BOOL)requestStateFor:(CLRegion * _Nonnull)region error:(NSError * _Nullable * _Nullable)error;
/// A passthrough for <code>CLLocationManager</code>’s <code>startMonitoringVisits</code> function.
- (BOOL)startMonitoringVisitsAndReturnError:(NSError * _Nullable * _Nullable)error;
/// A passthrough for <code>CLLocationManager</code>’s <code>stopMonitoringVisits</code> function.
- (BOOL)stopMonitoringVisitsAndReturnError:(NSError * _Nullable * _Nullable)error;
/// A passthrough for <code>CLLocationManager</code>’s <code>allowDeferredLocationUpdates</code> function.
- (BOOL)allowDeferredLocationUpdatesUntilTraveled:(CLLocationDistance)distance timeout:(NSTimeInterval)timeout error:(NSError * _Nullable * _Nullable)error;
/// A passthrough for <code>CLLocationManager</code>’s <code>disallowDeferredLocationUpdates</code> function.
- (BOOL)disallowDeferredLocationUpdatesAndReturnError:(NSError * _Nullable * _Nullable)error;
/// A passthrough for <code>CLLocationManager</code>’s <code>requestLocation</code> function.
- (BOOL)requestLocationAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_AVAILABILITY(ios,introduced=9.0);
/// Tells the delegate that the authorization status for the application changed.
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
/// \param manager The location manager object reporting the event.
///
/// \param status The new authorization status for the application.
///
- (void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
/// Tells the delegate about the state of the specified region.
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
/// \param manager The location manager object reporting the event.
///
/// \param state The state of the specified region. For a list of possible values, see the <code>CLRegionState</code> type.
///
/// \param region The region whose state was determined.
///
- (void)locationManager:(CLLocationManager * _Nonnull)manager didDetermineState:(CLRegionState)state forRegion:(CLRegion * _Nonnull)region;
/// Tells the delegate that the user entered the specified region.
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
/// \param manager The location manager object reporting the event.
///
/// \param region An object containing information about the region that was entered.
///
- (void)locationManager:(CLLocationManager * _Nonnull)manager didEnterRegion:(CLRegion * _Nonnull)region;
/// Tells the delegate that the user left the specified region.
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
/// \param manager The location manager object reporting the event.
///
/// \param region An object containing information about the region that was exited.
///
- (void)locationManager:(CLLocationManager * _Nonnull)manager didExitRegion:(CLRegion * _Nonnull)region;
/// Tells the delegate that the location manager was unable to retrieve a location value.
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
/// \param manager The location manager object that was unable to retrieve the location.
///
/// \param error The error object containing the reason the location or heading could not be retrieved.
///
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
/// Tells the delegate that updates will no longer be deferred.
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
/// \param manager The location manager object that generated the update event.
///
/// \param error The error object containing the reason deferred location updates could not be delivered.
///
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFinishDeferredUpdatesWithError:(NSError * _Nullable)error;
/// Tells the delegate that one or more beacons are in range.
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
/// \param manager The location manager object reporting the event.
///
/// \param beacons An array of <code>CLBeacon</code> objects representing the beacons currently in range.
///
/// \param region The region object containing the parameters that were used to locate the beacons.
///
- (void)locationManager:(CLLocationManager * _Nonnull)manager didRangeBeacons:(NSArray<CLBeacon *> * _Nonnull)beacons inRegion:(CLBeaconRegion * _Nonnull)region;
/// Tells the delegate that a new region is being monitored.
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
/// \param manager The location manager object reporting the event.
///
/// \param region The region that is being monitored.
///
- (void)locationManager:(CLLocationManager * _Nonnull)manager didStartMonitoringForRegion:(CLRegion * _Nonnull)region;
/// Tells the delegate that the location manager received updated heading information.
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
/// \param manager The location manager object that generated the update event.
///
/// \param newHeading The new heading data.
///
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateHeading:(CLHeading * _Nonnull)newHeading;
/// Tells the delegate that new location data is available.
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
/// \param manager The location manager object that generated the update event.
///
/// \param locations An array of <code>CLLocation</code> objects containing the location data.
///
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
/// Tells the delegate that a new visit-related event was received.
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
/// \param manager The location manager object reporting the event.
///
/// \param visit The visit object that contains the information about the event.
///
- (void)locationManager:(CLLocationManager * _Nonnull)manager didVisit:(CLVisit * _Nonnull)visit;
/// Tells the delegate that a region monitoring error occurred.
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
/// \param manager The location manager object reporting the event.
///
/// \param region The region for which the error occurred.
///
/// \param error An error object containing the error code that indicates why region monitoring failed.
///
- (void)locationManager:(CLLocationManager * _Nonnull)manager monitoringDidFailForRegion:(CLRegion * _Nullable)region withError:(NSError * _Nonnull)error;
/// Tells the delegate that an error occurred while gathering ranging information for a set of beacons.
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
/// \param manager The location manager object reporting the event.
///
/// \param region The region object that encountered the error.
///
/// \param error An error object containing the error code that indicates why ranging failed.
///
- (void)locationManager:(CLLocationManager * _Nonnull)manager rangingBeaconsDidFailForRegion:(CLBeaconRegion * _Nonnull)region withError:(NSError * _Nonnull)error;
/// Tells the delegate that location updates were paused.
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
/// \param manager The location manager object that paused the delivery of events.
///
- (void)locationManagerDidPauseLocationUpdates:(CLLocationManager * _Nonnull)manager;
/// Tells the delegate that the delivery of location updates has resumed.
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
/// \param manager The location manager that resumed the delivery of events.
///
- (void)locationManagerDidResumeLocationUpdates:(CLLocationManager * _Nonnull)manager;
/// Asks the delegate whether the heading calibration alert should be displayed.
/// <em>NOTE: https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/index.html</em>
/// \param manager The location manager object coordinating the display of the heading calibration alert.
///
///
/// returns:
/// true if you want to allow the heading calibration alert to be displayed; false if you do not.
- (BOOL)locationManagerShouldDisplayHeadingCalibration:(CLLocationManager * _Nonnull)manager SWIFT_WARN_UNUSED_RESULT;
/// This function is called when the <code>refreshTime</code> has elapsed.
/// <em>NOTE: If this object is not polled (<code>refreshTime = nil</code>), this method is not called.</em>
/// \param completion The completion that will provide the <code>ContextManager</code> with data or an error as appropriate.
///
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, CoreLocationContextPluginError) {
  CoreLocationContextPluginErrorNotManagingCoreLocationManager = 0,
  CoreLocationContextPluginErrorInvalidExpectedAuthorizationStatus = 1,
  CoreLocationContextPluginErrorNoLocationSet = 2,
};
static NSString * _Nonnull const CoreLocationContextPluginErrorDomain = @"FlybitsContextSDK.CoreLocationContextPluginError";


/// The <code>CoreLocationContextPluginDelegate</code> protocol defines the interface required to receive updates from the <code>CoreLocationContextPlugin</code> when it is acting as the primary <code>CLLocationManager</code>. No delegate updates will be published if <code>CoreLocationContextPlugin</code> is not managing an instance of <code>CLLocationManager</code>.
SWIFT_PROTOCOL("_TtP17FlybitsContextSDK33CoreLocationContextPluginDelegate_")
@protocol CoreLocationContextPluginDelegate
@optional
- (void)locationContextPlugin:(CoreLocationContextPlugin * _Nonnull)contextPlugin didChangeAuthorization:(CLAuthorizationStatus)status;
- (void)locationContextPlugin:(CoreLocationContextPlugin * _Nonnull)contextPlugin didDetermineState:(CLRegionState)state forRegion:(CLRegion * _Nonnull)region;
- (void)locationContextPlugin:(CoreLocationContextPlugin * _Nonnull)contextPlugin didEnterRegion:(CLRegion * _Nonnull)region;
- (void)locationContextPlugin:(CoreLocationContextPlugin * _Nonnull)contextPlugin didExitRegion:(CLRegion * _Nonnull)region;
- (void)locationContextPlugin:(CoreLocationContextPlugin * _Nonnull)contextPlugin didFailWithError:(NSError * _Nonnull)error;
- (void)locationContextPlugin:(CoreLocationContextPlugin * _Nonnull)contextPlugin didFinishDeferredUpdatesWithError:(NSError * _Nullable)error;
- (void)locationContextPlugin:(CoreLocationContextPlugin * _Nonnull)contextPlugin didRangeBeacons:(NSArray<CLBeacon *> * _Nonnull)beacons in:(CLBeaconRegion * _Nonnull)region;
- (void)locationContextPlugin:(CoreLocationContextPlugin * _Nonnull)contextPlugin didStartMonitoringFor:(CLRegion * _Nonnull)region;
- (void)locationContextPlugin:(CoreLocationContextPlugin * _Nonnull)contextPlugin didUpdateHeading:(CLHeading * _Nonnull)newHeading;
- (void)locationContextPlugin:(CoreLocationContextPlugin * _Nonnull)contextPlugin didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationContextPlugin:(CoreLocationContextPlugin * _Nonnull)contextPlugin didVisit:(CLVisit * _Nonnull)visit;
- (void)locationContextPlugin:(CoreLocationContextPlugin * _Nonnull)contextPlugin monitoringDidFailFor:(CLRegion * _Nullable)region withError:(NSError * _Nonnull)error;
- (void)locationContextPlugin:(CoreLocationContextPlugin * _Nonnull)contextPlugin rangingBeaconsDidFailFor:(CLBeaconRegion * _Nonnull)region withError:(NSError * _Nonnull)error;
- (void)locationContextPluginDidPauseLocationUpdates:(CoreLocationContextPlugin * _Nonnull)contextPlugin;
- (void)locationContextPluginDidResumeLocationUpdates:(CoreLocationContextPlugin * _Nonnull)contextPlugin;
- (BOOL)locationContextPluginShouldDisplayHeadingCalibration:(CoreLocationContextPlugin * _Nonnull)contextPlugin SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC17FlybitsContextSDK19DeviceContextPlugin")
@interface DeviceContextPlugin : NSObject <ContextPlugin>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The category of context in which the data provided is stored, i.e. flybits.ctx.location
@property (nonatomic, readonly, copy) NSString * _Nonnull pluginID;
/// The frequency at which this context plugin is polled for data.
/// <em>NOTE: nil implies this Context Plugin will push data to the <code>ContextManager</code></em>
@property (nonatomic) NSInteger refreshTime;
/// The time unit (<code>TimeUnit</code>) for the <code>refreshTime</code>.
@property (nonatomic) FlybitsUtilitiesTimeUnit timeUnit;
/// Retrieves battery information including percentage and whether or not the device is charging.
/// \param completion A completion called by the <code>ContextManager</code> to update the latest data.
///
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
@end

/// Defines errors that can occur with the <code>LanguageContextPlugin</code>.
typedef SWIFT_ENUM(NSInteger, DeviceContextPluginError) {
/// Invalid device language
  DeviceContextPluginErrorInvalidLanguageError = 0,
};
static NSString * _Nonnull const DeviceContextPluginErrorDomain = @"FlybitsContextSDK.DeviceContextPluginError";


SWIFT_CLASS("_TtC17FlybitsContextSDK9Eddystone")
@interface Eddystone : Beacon
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull beaconType;)
+ (NSString * _Nonnull)beaconType SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy, getter=namespace) NSString * _Nonnull namespace_;
@property (nonatomic, readonly, copy) NSString * _Nonnull instance;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@property (nonatomic, readonly) NSInteger hashValue;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (void)update:(Beacon * _Nonnull)other;
- (nonnull instancetype)initWithStrength:(NSInteger)strength distance:(CLLocationDistance)distance batteryVoltage:(uint16_t)batteryVoltage inRange:(BOOL)inRange SWIFT_UNAVAILABLE;
@end


/// The <code>EddystoneContextPlugin</code> provides information about Eddystones in the vicinity of the device.
SWIFT_CLASS("_TtC17FlybitsContextSDK22EddystoneContextPlugin")
@interface EddystoneContextPlugin : BeaconContextPlugin
/// Constructs an <code>EddystoneContextPlugin</code> that acts as an <code>EddystoneManagerDelegate</code> to track Eddystone beacons.
- (nonnull instancetype)initWithApiFrequency:(NSInteger)apiFrequency OBJC_DESIGNATED_INITIALIZER;
/// Retrieves battery information including percentage and whether or not the device is charging.
/// \param completion A completion called by the <code>ContextManager</code> to update the latest data.
///
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
- (void)didStartScan:(BeaconManager * _Nonnull)manager;
- (void)didStopScan:(BeaconManager * _Nonnull)manager;
- (void)didFindBeacon:(BeaconManager * _Nonnull)manager beacon:(Beacon * _Nonnull)beacon;
- (void)didLoseBeacon:(BeaconManager * _Nonnull)manager beacon:(Beacon * _Nonnull)beacon;
- (void)didUpdateBeacon:(BeaconManager * _Nonnull)manager beacon:(Beacon * _Nonnull)beacon;
@end

/// The <code>FrequencyType</code> indicates the unit of repeat for the schedule such as daily,
/// weekly, monthly, etc.
typedef SWIFT_ENUM(NSInteger, FrequencyType) {
/// Repeat once
  FrequencyTypeOnce = 0,
/// Repeat every hour
  FrequencyTypeHourly = 1,
/// Repeat every day
  FrequencyTypeDaily = 2,
/// Repeat every week
  FrequencyTypeWeekly = 3,
/// Repeat every month
  FrequencyTypeMonthly = 4,
/// Repeat every year
  FrequencyTypeYearly = 5,
};


SWIFT_CLASS("_TtC17FlybitsContextSDK15MonitoredBeacon")
@interface MonitoredBeacon : NSObject
- (nullable instancetype)initWithResponseData:(id _Nonnull)responseData OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly) NSInteger hashValue;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, BeaconType) {
  BeaconTypeIBeacon = 0,
  BeaconTypeEddystone = 1,
  BeaconTypeUnknown = 2,
};


/// The <code>NetworkContextPlugin</code> allows use of the SSID and connection type contexts.
SWIFT_CLASS("_TtC17FlybitsContextSDK20NetworkContextPlugin")
@interface NetworkContextPlugin : NSObject <ContextPlugin>
/// The category of context in which the data provided is stored, i.e. flybits.ctx.location
@property (nonatomic, readonly, copy) NSString * _Nonnull pluginID;
/// The frequency at which this context plugin is polled for data.
/// <em>NOTE: nil implies this Context Plugin will push data to the <code>ContextManager</code></em>
@property (nonatomic) NSInteger refreshTime;
/// The time unit (<code>TimeUnit</code>) for the <code>refreshTime</code>.
@property (nonatomic) FlybitsUtilitiesTimeUnit timeUnit;
/// Retrieves Network information such as internet reachability and whether the device is on WiFi and the SSID (if any).
/// \param completion A completion called by the <code>ContextManager</code> to update the latest context data.
///
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol OAuthConsentViewControllerDelegate;
@class WKWebView;
@class WKNavigationAction;
@class NSBundle;

SWIFT_CLASS("_TtC17FlybitsContextSDK26OAuthConsentViewController")
@interface OAuthConsentViewController : UIViewController <WKNavigationDelegate>
@property (nonatomic, strong) id <OAuthConsentViewControllerDelegate> _Nullable delegate;
- (void)loadView;
- (void)performOAuthRequest;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP17FlybitsContextSDK34OAuthConsentViewControllerDelegate_")
@protocol OAuthConsentViewControllerDelegate
- (void)controllerDidFinishSuccessfully:(OAuthConsentViewController * _Nonnull)controller;
- (void)controller:(OAuthConsentViewController * _Nonnull)controller didFailWithError:(NSError * _Nonnull)error;
@end

typedef SWIFT_ENUM(NSInteger, OAuthProvider) {
  OAuthProviderFacebook = 0,
  OAuthProviderSpotify = 1,
};

@class CMPedometer;

SWIFT_CLASS("_TtC17FlybitsContextSDK27PedometerStepsContextPlugin")
@interface PedometerStepsContextPlugin : NSObject <ContextPlugin>
/// The category of context in which the data provided is stored, i.e. flybits.ctx.location
@property (nonatomic, readonly, copy) NSString * _Nonnull pluginID;
/// The frequency at which this context plugin is polled for data.
/// <em>NOTE: nil implies this Context Plugin will push data to the <code>ContextManager</code></em>
@property (nonatomic) NSInteger refreshTime;
/// The time unit (<code>TimeUnit</code>) for the <code>refreshTime</code>.
@property (nonatomic) FlybitsUtilitiesTimeUnit timeUnit;
@property (nonatomic, strong) CMPedometer * _Null_unspecified pedometer;
/// Using the <code>SharedHealthStore</code>, this function retrieves the step count for today.
/// \param completion A completion called by the <code>ContextManager</code> to update the latest context data.
///
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>Plugin</code> class is responsible for retrieving all <code>ContextPlugin</code>s that needs to be automatically
/// managed based on tenant configurations. It includes both reserved ContextPlugins such
/// as Battery, Activity, etc and custom ContextPlugins.
SWIFT_CLASS("_TtC17FlybitsContextSDK6Plugin")
@interface Plugin : NSObject
/// Unique identifier for the Plugin
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Name of the plugin
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Refresh time for the plugin
@property (nonatomic, readonly) NSInteger refreshRate;
/// Checks whether the plugin is supported
@property (nonatomic, readonly) BOOL supported;
/// Checks whether the plugin is reserved
@property (nonatomic, readonly) BOOL reserved;
/// Checks whether the plugin is enabled
@property (nonatomic, readonly) BOOL enabled;
/// The <code>requestNewPassword</code> method is responsible for requesting a new password for a Flybits user account.
/// \param email The email account for a Flybits user to request new password.
///
/// \param completionHandler A completion closure that returns an <code>NSError</code> if failed.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
+ (FlybitsRequest * _Nonnull)getAllWithCompletion:(void (^ _Nonnull)(NSArray<Plugin *> * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// The <code>RepeatSchedule</code> class represents how often the <code>RuleScheduler</code> should be repeated for processing.
/// For example, using this class we can indicate either a <code>Rule</code> is processed on a weekly, monthly,
/// yearly basis and what the maximum number of times it should be processed.
SWIFT_CLASS("_TtC17FlybitsContextSDK14RepeatSchedule")
@interface RepeatSchedule : NSObject
@property (nonatomic, readonly) NSInteger frequency;
@property (nonatomic, readonly) NSInteger limit;
@property (nonatomic, readonly) enum FrequencyType frequencyType;
/// Initializes RepeatSchedule using frequency type, frequency and limit.
/// \param frequencyType The <code>FrequencyType</code> for repeating the schedule.
///
/// \param frequency The frequency for the schedule.
///
/// \param limit The limit for the schedule.
///
- (nonnull instancetype)initWithFrequencyType:(enum FrequencyType)frequencyType frequency:(NSInteger)frequency limit:(NSInteger)limit OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ReservedContextPlugin) {
  ReservedContextPluginActivity = 0,
  ReservedContextPluginAvailability = 1,
  ReservedContextPluginBattery = 2,
  ReservedContextPluginCarrier = 3,
  ReservedContextPluginCoreLocation = 4,
  ReservedContextPluginDevice = 5,
  ReservedContextPluginEddystone = 6,
  ReservedContextPluginIBeacon = 7,
  ReservedContextPluginNetwork = 8,
  ReservedContextPluginOAuth = 9,
  ReservedContextPluginPedometerSteps = 10,
};

enum RuleScope : NSInteger;
@class RuleScheduler;
@class RulePredicateQuery;
@class RulePredicate;

/// Represents Rule defined for Context engine to execute. Context engine evalues the rule
/// to provide context.
/// For example, using a rule and condition, you can define,
/// “remind me to run when the weather is > 20 degree celsius every morning”.
SWIFT_CLASS("_TtC17FlybitsContextSDK4Rule")
@interface Rule : NSObject
/// Name of the rule
@property (nonatomic, copy) NSString * _Nonnull name;
/// Threadhold the rule has to pass in order to consider valid
@property (nonatomic) double threshold;
/// Conditions to be evaluted for this rule to become valid
@property (nonatomic, copy) NSArray<Condition *> * _Nullable conditions;
/// Variables used in this Rule (i.e. ctx.location)
@property (nonatomic, copy) NSArray<NSString *> * _Nullable variables;
/// Unique identifier for the Rule
@property (nonatomic, copy) NSString * _Nullable identifier;
/// Description of the rule
@property (nonatomic, copy) NSString * _Nullable ruleDescription;
/// Color of the rule in hex value e.g. #FFFFFF
@property (nonatomic, copy) NSString * _Nullable color;
/// String representation of the rule
@property (nonatomic, readonly, copy) NSString * _Nonnull stringRepresentation;
/// Scope of the rule. The scope can either be “user” which means that it is only evaluated for the user
/// that created the rule, or “tenant” which means that it is evaluated for everyone in the Project.
@property (nonatomic, readonly) enum RuleScope scope;
/// Unique identifier of the user who created the rule.
@property (nonatomic, copy) NSString * _Nullable ownerID;
/// Default evaluation of the rule.
@property (nonatomic) BOOL defaultEvaluation;
@property (nonatomic, strong) RuleScheduler * _Nullable scheduler;
/// Failable initializer that returns a <code>Rule</code> based on the supplied representation.
/// \param response The response received from the server.
///
/// \param representation The raw data received from the server.
///
- (nullable instancetype)initWithResponseData:(id _Nonnull)responseData;
/// Initializes Rule using <code>Rule</code> name and <code>RulePredicateQuery</code>.
/// \param name The name of the rule. A valid name consists of a alphanumeric characters
/// without any spaces.
///
/// \param predicateQuery The <code>RulePredicateQuery</code> which is used to construct a rule
/// query.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name predicateQuery:(RulePredicateQuery * _Nonnull)predicateQuery;
/// Initializes Rule using <code>Rule</code> name and <code>RulePredicate</code>.
/// \param name The name of the rule. A valid name consists of a alphanumeric characters
/// without any spaces.
///
/// \param predicate The <code>RulePredicate</code> which is used to construct a rule
/// query.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name predicate:(RulePredicate * _Nonnull)predicate;
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// The <code>RulePredicate</code> class is responsible for create a base predicate which is the root
/// entity needed for creating a Flybits Rule. A predicate is a statement that can be evaluated to a
/// boolean value also known as atomic formula.
SWIFT_CLASS("_TtC17FlybitsContextSDK13RulePredicate")
@interface RulePredicate : NSObject
/// Plugin data dictionary that gets added to the rule
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull pluginData;
@property (nonatomic, readonly, copy) NSString * _Nonnull query;
/// Creates a predicate that is true if the plugin is greater than the
/// numeric value.
/// \param plugin The String representation of the Context Plugin that should be evaluated
///
/// \param value The numeric value that should be used for comparison.
///
/// \param id The unique identifier representing a specific entity that the <code>Rule</code> should be processed for.
///
///
/// returns:
/// The <code>RulePredicate</code> that can be used for constructing a <code>Rule</code>.
+ (RulePredicate * _Nullable)greaterThanWithPlugin:(NSString * _Nonnull)plugin value:(NSInteger)value id:(NSString * _Nullable)id SWIFT_WARN_UNUSED_RESULT;
/// Creates a predicate that is true if the plugin is greater than the
/// numeric value.
/// \param plugin The String representation of the Context Plugin that should be evaluated
///
/// \param value The numeric value that should be used for comparison.
///
/// \param id The unique identifier representing a specific entity that the <code>Rule</code> should be processed for.
///
///
/// returns:
/// The <code>RulePredicate</code> that can be used for constructing a <code>Rule</code>.
+ (RulePredicate * _Nullable)greaterThanOrEqualWithPlugin:(NSString * _Nonnull)plugin value:(NSInteger)value id:(NSString * _Nullable)id SWIFT_WARN_UNUSED_RESULT;
/// Creates a predicate that is true if the plugin is greater than the
/// numeric value.
/// \param plugin The String representation of the Context Plugin that should be evaluated
///
/// \param value The numeric value that should be used for comparison.
///
/// \param id The unique identifier representing a specific entity that the <code>Rule</code> should be processed for.
///
///
/// returns:
/// The <code>RulePredicate</code> that can be used for constructing a <code>Rule</code>.
+ (RulePredicate * _Nullable)lessThanWithPlugin:(NSString * _Nonnull)plugin value:(NSInteger)value id:(NSString * _Nullable)id SWIFT_WARN_UNUSED_RESULT;
/// Creates a predicate that is true if the plugin is greater than the
/// numeric value.
/// \param plugin The String representation of the Context Plugin that should be evaluated
///
/// \param value The numeric value that should be used for comparison.
///
/// \param id The unique identifier representing a specific entity that the <code>Rule</code> should be processed for.
///
///
/// returns:
/// The <code>RulePredicate</code> that can be used for constructing a <code>Rule</code>.
+ (RulePredicate * _Nullable)lessThanOrEqualWithPlugin:(NSString * _Nonnull)plugin value:(NSInteger)value id:(NSString * _Nullable)id SWIFT_WARN_UNUSED_RESULT;
/// Creates a predicate that is true if the plugin is greater than the
/// numeric value.
/// \param plugin The String representation of the Context Plugin that should be evaluated
///
/// \param value The numeric value that should be used for comparison.
///
/// \param id The unique identifier representing a specific entity that the <code>Rule</code> should be processed for.
///
///
/// returns:
/// The <code>RulePredicate</code> that can be used for constructing a <code>Rule</code>.
+ (RulePredicate * _Nullable)equals:(NSString * _Nonnull)plugin withInt:(NSInteger)value withId:(NSString * _Nullable)id SWIFT_WARN_UNUSED_RESULT;
/// Creates a predicate that is true if the plugin is greater than the
/// numeric value.
/// \param plugin The String representation of the Context Plugin that should be evaluated
///
/// \param value The numeric value that should be used for comparison.
///
/// \param id The unique identifier representing a specific entity that the <code>Rule</code> should be processed for.
///
///
/// returns:
/// The <code>RulePredicate</code> that can be used for constructing a <code>Rule</code>.
+ (RulePredicate * _Nullable)notEquals:(NSString * _Nonnull)plugin withInt:(NSInteger)value withId:(NSString * _Nullable)id SWIFT_WARN_UNUSED_RESULT;
/// Creates a predicate that is true if the plugin is greater than the
/// numeric value.
/// \param plugin The String representation of the Context Plugin that should be evaluated
///
/// \param value The numeric value that should be used for comparison.
///
/// \param id The unique identifier representing a specific entity that the <code>Rule</code> should be processed for.
///
///
/// returns:
/// The <code>RulePredicate</code> that can be used for constructing a <code>Rule</code>.
+ (RulePredicate * _Nullable)equals:(NSString * _Nonnull)plugin withBool:(BOOL)value withId:(NSString * _Nullable)id SWIFT_WARN_UNUSED_RESULT;
/// Creates a predicate that is true if the plugin is greater than the
/// numeric value.
/// \param plugin The String representation of the Context Plugin that should be evaluated
///
/// \param value The numeric value that should be used for comparison.
///
/// \param id The unique identifier representing a specific entity that the <code>Rule</code> should be processed for.
///
///
/// returns:
/// The <code>RulePredicate</code> that can be used for constructing a <code>Rule</code>.
+ (RulePredicate * _Nullable)notEquals:(NSString * _Nonnull)plugin withBool:(BOOL)value withId:(NSString * _Nullable)id SWIFT_WARN_UNUSED_RESULT;
/// Creates a predicate that is true if the plugin is greater than the
/// numeric value.
/// \param plugin The String representation of the Context Plugin that should be evaluated
///
/// \param value The numeric value that should be used for comparison.
///
/// \param id The unique identifier representing a specific entity that the <code>Rule</code> should be processed for.
///
///
/// returns:
/// The <code>RulePredicate</code> that can be used for constructing a <code>Rule</code>.
+ (RulePredicate * _Nullable)equalsWithPlugin:(NSString * _Nonnull)plugin value:(NSString * _Nonnull)value id:(NSString * _Nullable)id SWIFT_WARN_UNUSED_RESULT;
/// Creates a predicate that is true if the plugin is greater than the
/// numeric value.
/// \param plugin The String representation of the Context Plugin that should be evaluated
///
/// \param value The numeric value that should be used for comparison.
///
/// \param id The unique identifier representing a specific entity that the <code>Rule</code> should be processed for.
///
///
/// returns:
/// The <code>RulePredicate</code> that can be used for constructing a <code>Rule</code>.
+ (RulePredicate * _Nullable)equalsIgnoreCaseWithPlugin:(NSString * _Nonnull)plugin value:(NSString * _Nonnull)value id:(NSString * _Nullable)id SWIFT_WARN_UNUSED_RESULT;
/// Creates a predicate that is true if the plugin is greater than the
/// numeric value.
/// \param plugin The String representation of the Context Plugin that should be evaluated
///
/// \param value The numeric value that should be used for comparison.
///
/// \param id The unique identifier representing a specific entity that the <code>Rule</code> should be processed for.
///
///
/// returns:
/// The <code>RulePredicate</code> that can be used for constructing a <code>Rule</code>.
+ (RulePredicate * _Nullable)notEqualsWithPlugin:(NSString * _Nonnull)plugin value:(NSString * _Nonnull)value id:(NSString * _Nullable)id SWIFT_WARN_UNUSED_RESULT;
/// Creates a predicate that is true if the plugin is greater than the
/// numeric value.
/// \param plugin The String representation of the Context Plugin that should be evaluated
///
/// \param value The numeric value that should be used for comparison.
///
/// \param id The unique identifier representing a specific entity that the <code>Rule</code> should be processed for.
///
///
/// returns:
/// The <code>RulePredicate</code> that can be used for constructing a <code>Rule</code>.
+ (RulePredicate * _Nullable)notEqualsIgnoreCaseWithPlugin:(NSString * _Nonnull)plugin value:(NSString * _Nonnull)value id:(NSString * _Nullable)id SWIFT_WARN_UNUSED_RESULT;
/// Creates a predicate that is true if the plugin is greater than the
/// numeric value.
/// \param plugin The String representation of the Context Plugin that should be evaluated
///
/// \param value The numeric value that should be used for comparison.
///
/// \param id The unique identifier representing a specific entity that the <code>Rule</code> should be processed for.
///
///
/// returns:
/// The <code>RulePredicate</code> that can be used for constructing a <code>Rule</code>.
+ (RulePredicate * _Nullable)containsWithPlugin:(NSString * _Nonnull)plugin value:(NSString * _Nonnull)value id:(NSString * _Nullable)id SWIFT_WARN_UNUSED_RESULT;
/// Creates a predicate that is true if the plugin is greater than the
/// numeric value.
/// \param plugin The String representation of the Context Plugin that should be evaluated
///
/// \param value The numeric value that should be used for comparison.
///
/// \param id The unique identifier representing a specific entity that the <code>Rule</code> should be processed for.
///
///
/// returns:
/// The <code>RulePredicate</code> that can be used for constructing a <code>Rule</code>.
+ (RulePredicate * _Nullable)containsIgnoreCaseWithPlugin:(NSString * _Nonnull)plugin value:(NSString * _Nonnull)value id:(NSString * _Nullable)id SWIFT_WARN_UNUSED_RESULT;
/// Creates a predicate that is true if the device’s location is within a certain distance
/// (defined using the distanceInMeters attribute) of a geographical point.
/// \param pointLat The latitude of a geographical point that the device’s latitude should be
/// compared to.
///
/// \param pointLng The longitude of a geographical point that the device’s longitude should be
/// compared to.
///
/// \param distanceInMeters The distance in meters that should be used as the maximum distance
/// between the device the point defined using pointLat and pointLng.
///
/// \param isInArea Indicates whether the rule will be evaluated when the user is within the
/// range or out of range.
///
///
/// returns:
/// The <code>RulePredicate</code> that can be used for constructing a <code>Rule</code>.
+ (RulePredicate * _Nullable)withinRangeWithPointLat:(double)pointLat pointLng:(double)pointLng distanceInMeters:(NSInteger)distanceInMeters isInArea:(BOOL)isInArea SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// The <code>RulePredicateQuery</code> class is used to create a String representation of a <code>Rule</code>
/// based on the <code>RulePredicate</code> object that constructed. These <code>RulePredicate</code> can be
/// combined using Ands and Ors in order to build more complex <code>Rule</code> queries in order to
/// suite more use cases. Additionally you can add other <code>RulePredicateQuery</code> objects to add
/// more complex scenarios into your application.
SWIFT_CLASS("_TtC17FlybitsContextSDK18RulePredicateQuery")
@interface RulePredicateQuery : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull query;
/// Initializes a <code>RulePredicateQuery</code> using <code>RulePredicate</code>.
/// \param predicate The <code>RulePredicate</code> used to define the base <code>Rule</code> query.
///
- (nonnull instancetype)initWithRulePredicate:(RulePredicate * _Nonnull)rulePredicate OBJC_DESIGNATED_INITIALIZER;
/// Used to join the current query with another <code>RulePredicate</code>s in order to indicate
/// that both <code>RulePredicate</code>’s should be true in order for the rule to be evaluated as
/// true.
/// \param predicate The <code>RulePredicate</code> that should be added to the <code>Rule</code>
/// query.
///
///
/// returns:
/// A RulePredicateQuery to which additional <code>RulePredicate</code>s can be added
/// to.
- (RulePredicateQuery * _Nonnull)andWithRulePredicate:(RulePredicate * _Nonnull)rulePredicate SWIFT_WARN_UNUSED_RESULT;
/// Used to join the current query with another <code>RulePredicateQuery</code>s in order to
/// indicate that both <code>RulePredicateQuery</code>s should be true in order for the rule to be
/// evaluated as true.
/// \param query The <code>RulePredicateQuery</code> that should be added to the `Rule}
/// query.
///
///
/// returns:
/// A RulePredicateQuery to which additional <code>RulePredicate</code>s can be added
/// to.
- (RulePredicateQuery * _Nonnull)andWithQuery:(RulePredicateQuery * _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
/// Used to join the current query with another <code>RulePredicateQuery</code>s in order to
/// indicate that either of the two <code>RulePredicateQuery</code>s should be true in order for
/// the rule to be evaluated as true.
/// \param predicate The <code>RulePredicate</code> that should be added to the `Rule}
/// query.
///
///
/// returns:
/// A RulePredicateQuery object to which additional <code>RulePredicate</code>s can be added
/// to.
- (RulePredicateQuery * _Nonnull)orWithRulePredicate:(RulePredicate * _Nonnull)rulePredicate SWIFT_WARN_UNUSED_RESULT;
/// Used to join the current query with another <code>RulePredicateQuery</code>s in order to
/// indicate that either of the two <code>RulePredicateQuery</code>s should be true in order for
/// the rule to be evaluated as true.
/// \param query The <code>RulePredicateQuery</code> that should be added to the <code>Rule</code>
/// query.
///
///
/// returns:
/// A RulePredicateQuery object to which additional <code>RulePredicate</code>s can be added
/// to.
- (RulePredicateQuery * _Nonnull)orWithQuery:(RulePredicateQuery * _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// The <code>RuleScheduler</code> class allows the application to define a repeatable schedule that
/// indicates when a <code>Rule</code> should be evaluated. For times that the
/// schedule is not active, the rule will not be processed as either true or false regardless of what
/// is sent to the server.
SWIFT_CLASS("_TtC17FlybitsContextSDK13RuleScheduler")
@interface RuleScheduler : NSObject
/// Start time for the Rule processing
@property (nonatomic, readonly) int32_t startTime;
/// End time for the Rule processing
@property (nonatomic, readonly) int32_t endTime;
/// Repeat schedule for the Rule processing
@property (nonatomic, readonly, strong) RepeatSchedule * _Nullable repeatSchedule;
/// Contexual start for the Rule processing. This overirides start time processing.
/// Refer <code>RuleScheduler.contextualValue(plugin: String, id: String, value: Int, filter: ContextualFilter)</code> for usage.
@property (nonatomic, copy) NSString * _Nullable contextualStart;
/// Contexual end for the Rule processing. This overirides end time processing.
/// Refer <code>RuleScheduler.contextualValue(plugin: String, id: String, value: Int, filter: ContextualFilter)</code> for usage.
@property (nonatomic, copy) NSString * _Nullable contextualEnd;
/// Initializes RuleScheduler using start date and end date of the <code>Rule</code> processing
/// as well as the <code>RepeatSchedule</code> object to define how often the
/// <code>Rule</code> processing is repeated.
/// \param startDate The start date to represent the time that the <code>Rule</code> should be activated
/// to allow for Context changes.
///
/// \param endDate The end date to represent the time that the <code>Rule</code> should be deactivated
/// for Context processing.
///
/// \param repeatSchedule The <code>RepeatSchedule</code> to indicate when the <code>Rule</code>’s evaluation is repeated.
/// Defaults to only once without repeating.
///
- (nonnull instancetype)initWithStartDate:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nullable)endDate repeatSchedule:(RepeatSchedule * _Nullable)repeatSchedule OBJC_DESIGNATED_INITIALIZER;
/// Constructs contextual value to use for scheduling contextual Rules.
/// For example - to build a contextual start for one hour before checkin time of the user to hotel in SF,
/// you can specify plugin as “ctx.testplugin.hotels.checkin”, id as “SF”, value as “3600” and filter as “before”.
/// \param plugin The String representation of the Context Plugin that should be evaluated.
///
/// \param id The unique identifier representing a specific entity that the <code>Rule</code> should be processed for.
///
/// \param value The numeric value that should be used for comparison.
///
/// \param filter The filter for the value.
///
///
/// returns:
/// The contextual key that can be used for constructing a <code>RuleScheduler</code>.
+ (NSString * _Nullable)contextualValueWithPlugin:(NSString * _Nonnull)plugin id:(NSString * _Nonnull)id value:(NSInteger)value filter:(enum ContextualFilter)filter SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Indicates the scope that a <code>Rule</code> is associated to. Currently Rules can have either
/// <code>User</code> or <code>Project</code> scope. User scope is used to define Rules that
/// are only evaluated for the current user, while Project scope Rules are evaluated
/// for all user’s within the project.
typedef SWIFT_ENUM(NSInteger, RuleScope) {
/// Indicates project scope for a <code>Rule</code>.
  RuleScopeProject = 0,
/// Indicates user scope for a <code>Rule</code>.
  RuleScopeUser = 1,
  RuleScopeAll = 2,
};


/// The <code>RulesQuery</code> class is used to define all the parameters set for the GET
/// request associated to <code>Rule</code>.
SWIFT_CLASS("_TtC17FlybitsContextSDK10RulesQuery")
@interface RulesQuery : Query
/// Rules scope, defaults to Project scope
@property (nonatomic) enum RuleScope scope;
/// Converts the query to key-value pairs for use in constructing a query string.
///
/// returns:
/// A dictionary containing the relevant key-value pairs to construct a query string.
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(Pager * _Nullable)pager OBJC_DESIGNATED_INITIALIZER;
@end

@class NSUUID;

SWIFT_CLASS("_TtC17FlybitsContextSDK7iBeacon")
@interface iBeacon : Beacon
@property (nonatomic, readonly, copy) NSString * _Nonnull majorID;
@property (nonatomic, readonly, copy) NSString * _Nonnull minorID;
@property (nonatomic, readonly, copy) NSUUID * _Nonnull uuid;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull beaconType;)
+ (NSString * _Nonnull)beaconType SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithMajorID:(NSString * _Nonnull)majorID minorID:(NSString * _Nonnull)minorID uuid:(NSUUID * _Nonnull)uuid distance:(CLLocationDistance)distance RSSI:(NSInteger)RSSI batteryVoltage:(uint16_t)batteryVoltage inRange:(BOOL)inRange OBJC_DESIGNATED_INITIALIZER;
- (void)update:(Beacon * _Nonnull)other;
@property (nonatomic, readonly) NSInteger hashValue;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithStrength:(NSInteger)strength distance:(CLLocationDistance)distance batteryVoltage:(uint16_t)batteryVoltage inRange:(BOOL)inRange SWIFT_UNAVAILABLE;
@end


/// The <code>iBeaconContextPlugin</code> provides information about iBeacons in the vicinity of the device.
SWIFT_CLASS("_TtC17FlybitsContextSDK20iBeaconContextPlugin")
@interface iBeaconContextPlugin : BeaconContextPlugin <CoreLocationContextPluginDelegate>
- (void)startRangingBeaconsWithBeacons:(NSArray<CLBeaconRegion *> * _Nonnull)beacons;
- (void)startMonitoringForRegions:(NSArray<CLBeaconRegion *> * _Nonnull)beacons;
- (void)stopRangingBeacons:(NSArray<CLBeaconRegion *> * _Nonnull)beacons;
- (void)stopMonitoringForRegions:(NSArray<CLBeaconRegion *> * _Nonnull)beacons;
/// Retrieves information about active beacons including distance and identifying data.
/// \param completion A completion called by the <code>ContextManager</code> to update the latest data.
///
- (void)refreshDataWithCompletion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
- (void)locationContextPlugin:(CoreLocationContextPlugin * _Nonnull)contextPlugin didEnterRegion:(CLRegion * _Nonnull)region;
- (void)locationContextPlugin:(CoreLocationContextPlugin * _Nonnull)contextPlugin didExitRegion:(CLRegion * _Nonnull)region;
- (void)locationContextPlugin:(CoreLocationContextPlugin * _Nonnull)contextPlugin didRangeBeacons:(NSArray<CLBeacon *> * _Nonnull)beacons in:(CLBeaconRegion * _Nonnull)region;
- (void)locationContextPlugin:(CoreLocationContextPlugin * _Nonnull)contextPlugin didDetermineState:(CLRegionState)state forRegion:(CLRegion * _Nonnull)region;
- (void)locationContextPlugin:(CoreLocationContextPlugin * _Nonnull)contextPlugin rangingBeaconsDidFailFor:(CLBeaconRegion * _Nonnull)region withError:(NSError * _Nonnull)error;
- (void)locationContextPlugin:(CoreLocationContextPlugin * _Nonnull)contextPlugin didStartMonitoringFor:(CLRegion * _Nonnull)region;
- (void)locationContextPlugin:(CoreLocationContextPlugin * _Nonnull)contextPlugin monitoringDidFailFor:(CLRegion * _Nullable)region withError:(NSError * _Nonnull)error;
- (void)locationContextPlugin:(CoreLocationContextPlugin * _Nonnull)contextPlugin didFailWithError:(NSError * _Nonnull)error;
- (nonnull instancetype)initWithApiFrequency:(NSInteger)apiFrequency SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, iBeaconOptions) {
  iBeaconOptionsMonitoring = 0,
  iBeaconOptionsRanging = 1,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
