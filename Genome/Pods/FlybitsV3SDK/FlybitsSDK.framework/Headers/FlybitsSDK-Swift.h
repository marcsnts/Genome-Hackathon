// Generated by Apple Swift version 4.1 effective-3.3 (swiftlang-902.0.48 clang-902.0.37.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import CoreLocation;
@import CoreData;
@import Dispatch;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FlybitsSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum StorageType : NSInteger;
@class UploadServiceTime;
@class Properties;

/// The <code>Analytics</code> class is the access point for all Analytics
/// based operations in Flybits. It handles both the storing of
/// logged events which the user calls to be recorded, as well as
/// flushing all stored data.
/// It is required that you first initialize <code>Session</code> with an api key
/// before using this class.
SWIFT_CLASS("_TtC10FlybitsSDK9Analytics")
@interface Analytics : NSObject
/// Singleton access to the Analytics, <code>configure</code> allows to modify default settings.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Analytics * _Nonnull shared;)
+ (Analytics * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Custom device identifier for events
@property (nonatomic, readonly, copy) NSString * _Nullable customDeviceId;
/// Storage type for events, defaults to coreData
@property (nonatomic, readonly) enum StorageType storageType;
/// Uplaod service time
@property (nonatomic, readonly, strong) UploadServiceTime * _Nullable serviceTime;
/// The amount of time between each flush.
@property (nonatomic, readonly) double timeForDataFlush;
/// The amount of time to wait before retry if an error occurs during flush.
@property (nonatomic, readonly) double timeForDataFlushFlex;
/// Configures analytics that are established by the application
/// developer when the application is first started.
/// \param storageType The preferred storage type, i.e.,
/// Core Data or memory
///
/// \param uploadServiceTime The time parameters that
/// describe the manner in which analytics will be sent to
/// the server.
///
/// \param customDeviceId A device ID
///
- (BOOL)configureWithStorageType:(enum StorageType)storageType uploadServiceTime:(UploadServiceTime * _Nullable)uploadServiceTime customDeviceId:(NSString * _Nullable)customDeviceId error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Sends all queued up events stored on the phone to their appropriate channels.
- (void)flushEvents;
/// Sets a flag to abort any currently running flushes and shuts
/// down Analytics.
- (void)cancelFlush;
/// Logs an event with name <code>eventName</code> with an optional parameter
/// of <code>Properties</code>
/// \param eventName The name of the event to be logged.
///
/// \param properties The custom <code>Properties</code> this event
/// may have.
///
- (void)logEventWithEventName:(NSString * _Nonnull)eventName properties:(Properties * _Nullable)properties;
/// Logs and starts a timed event with the given <code>Properties</code>.
/// It will be sent to all upload channels including Flybits’.
/// \param eventName The name of the event to be logged.
///
/// \param properties The custom <code>Properties</code> this event
/// may have.
///
///
/// returns:
/// A reference to the started event is returned. This is used to end the timed event.
- (NSInteger)startTimedEventWithEventName:(NSString * _Nonnull)eventName properties:(Properties * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
/// Logs that the timed event has ended.
/// \param reference The reference to the started timed
/// event that will end.
///
///
/// returns:
/// A boolean representing a successfully added analytics
/// event to <code>queueStorage</code>
- (BOOL)endTimedEventWithReference:(NSInteger)reference SWIFT_WARN_UNUSED_RESULT;
@end

/// Storage type for events
typedef SWIFT_ENUM(NSInteger, StorageType) {
/// Uses CoreData for storage
  StorageTypeCoreData = 0,
/// Uses UserDefaults for storage
  StorageTypeMemory = 1,
};

enum FlybitsUtilitiesTimeUnit : NSInteger;

/// UploadServiceTime: The time parameters that describe
/// the manner in which analytics will be sent to the server.
SWIFT_CLASS("_TtCC10FlybitsSDK9Analytics17UploadServiceTime")
@interface UploadServiceTime : NSObject
/// Frequency to send Analytics events.
@property (nonatomic, readonly) double timeUpdate;
/// Time to wait for sending analytics events in the case of a failed attempt.
@property (nonatomic, readonly) double timeFlex;
/// Units for the time update frequency.
@property (nonatomic, readonly) enum FlybitsUtilitiesTimeUnit metric;
/// Default initializer.
/// \param timeUpdate Frequency to send Analytics events.
///
/// \param timeFlex Time to wait for sending analytics
/// events in the case of a failed attempt.
///
/// \param metric Units for the time update frequency.
///
- (nonnull instancetype)initWith:(double)timeUpdate timeFlex:(double)timeFlex metric:(enum FlybitsUtilitiesTimeUnit)metric OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// The <code>IDP</code> protocol defines Identity Providers (IDP) supported by Flybits.
SWIFT_PROTOCOL("_TtP10FlybitsSDK3IDP_")
@protocol IDP <NSCoding>
/// The Identity Provider name.
@property (nonatomic, readonly, copy) NSString * _Nonnull provider;
/// The unique identifier for the Flybits Project that this IDP should connect to.
@property (nonatomic, readonly, copy) NSString * _Nonnull projectID;
/// The URL Endpoint for the IDP to successfully connect.
@property (nonatomic, readonly, copy) NSString * _Nonnull authenticationEndPoint;
/// The HTTP(s) POST request body for connecting.
@property (nonatomic, readonly, copy) NSString * _Nonnull requestBody;
@end

@class NSCoder;

/// The <code>AnonymousIDP</code> class is responsible for creating an anonymous Flybits account.
SWIFT_CLASS("_TtC10FlybitsSDK12AnonymousIDP")
@interface AnonymousIDP : NSObject <IDP>
/// The Identity Provider name.
@property (nonatomic, readonly, copy) NSString * _Nonnull provider;
/// The unique identifier for the Flybits Project that this IDP should connect to.
@property (nonatomic, readonly, copy) NSString * _Nonnull projectID;
/// The URL Endpoint for the IDP to successfully connect.
@property (nonatomic, readonly, copy) NSString * _Nonnull authenticationEndPoint;
/// The HTTP(s) POST request body for connecting.
@property (nonatomic, readonly, copy) NSString * _Nonnull requestBody;
/// NSCoding decode initializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
/// NSCoding encode
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface CLLocation (SWIFT_EXTENSION(FlybitsSDK))
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("Cache")
@interface Cache : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;
@class NSDate;

@interface Cache (SWIFT_EXTENSION(FlybitsSDK))
@property (nonatomic, strong) NSData * _Nullable jsonData;
@property (nonatomic, strong) NSDate * _Nullable lastReadAt;
@property (nonatomic, strong) NSDate * _Nullable savedAt;
@property (nonatomic, copy) NSString * _Nullable url;
@end

/// Defines all the error that can be return by FlybitsSDK when the cache layer
/// fails or throws exception
typedef SWIFT_ENUM(NSInteger, CacheError) {
/// Token not found
  CacheErrorTokenNotFound = 0,
};
static NSString * _Nonnull const CacheErrorDomain = @"FlybitsSDK.CacheError";


/// A <code>CacheManager</code> useful for any type of FlybitsRequest. It is configurable by an application developer
/// by setting the <code>CachePolicy</code>
SWIFT_CLASS("_TtC10FlybitsSDK12CacheManager")
@interface CacheManager : NSObject
/// CacheManager singleton
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CacheManager * _Nonnull shared;)
+ (CacheManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// A hard limit for the number of records to cache.
@property (nonatomic) NSInteger limit;
/// Saves <code>data</code> for a given <code>urlString</code>.
/// \param data <code>Data</code> that will be saved.
///
/// \param urlString A unique url string that defines where the data came from.
///
- (void)save:(NSData * _Nonnull)data for:(NSString * _Nonnull)urlString;
/// Reads all records in the CoreData persistent store that match the given <code>urlString</code>
/// \param urlString A <code>String</code> representing the url to which the requested data is coming from.
///
///
/// returns:
/// <code>Data</code> that needs to be converted to JSON and deserialized to a custom object type.
- (NSData * _Nullable)read:(NSString * _Nonnull)urlString SWIFT_WARN_UNUSED_RESULT;
/// Delete all function to clear the cache completely.
- (void)deleteAll;
@end

/// Defines all the error that can be return by FlybitsSDK when it fails to
/// format server response
typedef SWIFT_ENUM(NSInteger, CocoaError) {
/// Formatting error
  CocoaErrorFormattingError = 0,
};
static NSString * _Nonnull const CocoaErrorDomain = @"FlybitsSDK.CocoaError";

/// Error types for <code>Analytics</code> configuration
typedef SWIFT_ENUM(NSInteger, ConfigurationError) {
/// Stored events must be flushed before changing storage types.
  ConfigurationErrorHasStoredEvents = 0,
/// API key/Project ID must be set before using Analytics.
  ConfigurationErrorApiKeyNotSet = 1,
};
static NSString * _Nonnull const ConfigurationErrorDomain = @"FlybitsSDK.ConfigurationError";

/// Defines all the error that can be return by FlybitsSDK when the cache store
/// fails or throws exception
typedef SWIFT_ENUM(NSInteger, CoreDataError) {
/// Store not found
  CoreDataErrorStoreNotFound = 0,
};
static NSString * _Nonnull const CoreDataErrorDomain = @"FlybitsSDK.CoreDataError";

/// Defines errors that contains list of other errors. You should inspect the error’s userInfo to see other errors
typedef SWIFT_ENUM(NSInteger, ErrorList) {
/// Array
  ErrorListArray = 0,
};
static NSString * _Nonnull const ErrorListDomain = @"FlybitsSDK.ErrorList";

@class NSError;
@class FlybitsRequest;

/// The <code>FlyJWT</code> class handles refreshing of token with the Flybits server.
SWIFT_CLASS("_TtC10FlybitsSDK6FlyJWT")
@interface FlyJWT : NSObject
/// The <code>refreshJWT</code> method is responsible for refreshing and updating the JWT token with the FLybits server.
/// \param completionHandler A completion closure that returns an <code>NSError</code> if failed.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
+ (FlybitsRequest * _Nonnull)refreshJWTWithCompletion:(void (^ _Nonnull)(NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>FlybitsIDP</code> class is responsible for creating or connecting a Flybits user account.
SWIFT_CLASS("_TtC10FlybitsSDK10FlybitsIDP")
@interface FlybitsIDP : NSObject <IDP>
/// Initializer used to register and create a user account for Flybits.
/// \param email The email account for a Flybits user.
///
/// \param password The password for a Flybits user.
///
/// \param firstName The first name of a user.
///
/// \param lastName The last name of a user.
///
- (nonnull instancetype)initWithEmail:(NSString * _Nonnull)email password:(NSString * _Nonnull)password firstName:(NSString * _Nonnull)firstName lastName:(NSString * _Nonnull)lastName;
/// Initializer used to connect a user account for Flybits.
/// \param email The email account for a Flybits user.
///
/// \param password The password for a Flybits user.
///
- (nonnull instancetype)initWithEmail:(NSString * _Nonnull)email password:(NSString * _Nonnull)password OBJC_DESIGNATED_INITIALIZER;
/// The Identity Provider name.
@property (nonatomic, readonly, copy) NSString * _Nonnull provider;
/// The unique identifier for the Flybits Project that this IDP should connect to.
@property (nonatomic, readonly, copy) NSString * _Nonnull projectID;
/// The URL Endpoint for the IDP to successfully connect.
@property (nonatomic, readonly, copy) NSString * _Nonnull authenticationEndPoint;
/// The HTTP(s) POST request body for connecting.
@property (nonatomic, readonly, copy) NSString * _Nonnull requestBody;
/// The <code>requestNewPassword</code> method is responsible for requesting a new password for a Flybits user account.
/// \param email The email account for a Flybits user to request new password.
///
/// \param completionHandler A completion closure that returns an <code>NSError</code> if failed.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
+ (FlybitsRequest * _Nonnull)requestNewPasswordWithEmail:(NSString * _Nonnull)email completion:(void (^ _Nonnull)(NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// The <code>changePassword</code> method is responsible for changing old password to a new password for a Flybits user account.
/// \param currentPassword The current password for a Flybits user account.
///
/// \param newPassword The new password for a Flybits user account.
///
/// \param completionHandler A completion closure that returns an <code>NSError</code> if failed.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
+ (FlybitsRequest * _Nonnull)changePasswordWithCurrentPassword:(NSString * _Nonnull)currentPassword newPassword:(NSString * _Nonnull)newPassword completion:(void (^ _Nonnull)(NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// NSCoding decode initializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
/// NSCoding encode
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol FlybitsScope;
@class User;
enum Environment : NSInteger;

/// The <code>FlybitsManager</code> class is a primary integration point for all SDKs
/// and is responsible for defining all <code>FlybitsScope</code>’s as well as
/// performing <code>User</code> operations such as logging in, logging out, disabling account,
/// resetting password and refreshing the JWT token.
SWIFT_CLASS("_TtC10FlybitsSDK14FlybitsManager")
@interface FlybitsManager : NSObject <NSCoding>
/// Unique Flybits Project ID for your project.
@property (nonatomic, readonly, copy) NSString * _Nullable projectID;
/// Identity Provider (<code>IDP</code>) provided for authentication.
@property (nonatomic, readonly, strong) id <IDP> _Nonnull idProvider;
/// <code>FlybitsScope</code>’s registered for receiving updates.
@property (nonatomic, readonly, copy) NSArray<id <FlybitsScope>> * _Nonnull scopes;
/// Language codes used for localizations.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull languageCodes;
/// Default initializer to create <code>FlybitsManager</code>.
/// \param projectID Unique Flybits Project ID.
///
/// \param idProvider Identity Provider to connect.
///
/// \param scopes Flybits Scopes to receive updates.
///
/// \param languageCodes Language codes for localizations.
///
- (nullable instancetype)initWithProjectID:(NSString * _Nullable)projectID idProvider:(id <IDP> _Nonnull)idProvider scopes:(NSArray<id <FlybitsScope>> * _Nonnull)scopes languageCodes:(NSArray<NSString *> * _Nonnull)languageCodes OBJC_DESIGNATED_INITIALIZER;
/// Registers a <code>FlybitsScope</code> to receive updates.
- (void)addWithScope:(id <FlybitsScope> _Nonnull)scope;
/// Adds a language code for localization.
- (void)addWithLanguageCode:(NSString * _Nonnull)languageCode;
/// Updates Identity Provider to use for connecting account.
- (void)updateWithIdProvider:(id <IDP> _Nonnull)idProvider;
/// The <code>connect</code> method is responsible for connecting the identity provider to the Flybits.
/// On successful connection, all registered <code>FlybitsScope</code>’s gets notified
/// through the <code>onConnected</code> method.
/// \param completionHandler A completion closure that returns the connected <code>User</code> on success
/// or an <code>NSError</code> if failed.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
- (FlybitsRequest * _Nonnull)connectWithCompletion:(void (^ _Nonnull)(User * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// The <code>disconnect</code> method is responsible for disconnecting and clearing the session with Flybits.
/// On successfully disconnecting, all registered <code>FlybitsScope</code>’s gets notified
/// through the <code>onDisconnected</code> method.
/// \param completionHandler A completion closure that returns the disconnected JWT token on success
/// or an <code>NSError</code> if failed.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
- (FlybitsRequest * _Nonnull)disconnectWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// The <code>destroy</code> method is responsible for destroying the user account and
/// clearing the session with Flybits.
/// On successfully destroying, all registered <code>FlybitsScope</code>’s gets notified
/// through the <code>onAccountDestroyed</code> method.
/// \param completionHandler A completion closure that returns the destroyed JWT token on success
/// or an <code>NSError</code> if failed.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
- (FlybitsRequest * _Nonnull)destroyWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// The <code>getUser</code> method is responsible for fetching the user account information.
/// \param completionHandler A completion closure that returns the <code>User</code> on success
/// or an <code>NSError</code> if failed.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
- (FlybitsRequest * _Nonnull)getUserWithCompletion:(void (^ _Nonnull)(User * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// The <code>isConnected</code> method is responsible for checking if the user session is established
/// with the Flybits server.
/// \param scopes FlybitsScope’s that needs to be notified for updates.
///
/// \param completionHandler A completion closure that returns the status and user on success
/// or an <code>NSError</code> if failed.
///
///
/// returns:
/// A cancellable or nil <code>FlybitsRequest</code> object.
+ (FlybitsRequest * _Nullable)isConnectedWithCompletion:(void (^ _Nonnull)(User * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// The <code>bindProject</code> method is responsible for refreshing and updating the JWT token with the FLybits server.
/// \param completionHandler A completion closure that returns an <code>NSError</code> if failed.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
- (FlybitsRequest * _Nonnull)bindProjectWithProjectID:(NSString * _Nonnull)projectID completion:(void (^ _Nonnull)(NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Enables logging for debugging
+ (void)enableLogging;
/// Environment (Production must be used for apps).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum Environment environment;)
+ (enum Environment)environment SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnvironment:(enum Environment)value;
/// Gateway URL.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gatewayURL;)
+ (NSString * _Nonnull)gatewayURL SWIFT_WARN_UNUSED_RESULT;
/// NSCoding encode
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// NSCoding decode initializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Flybits Environment server.
typedef SWIFT_ENUM(NSInteger, Environment) {
/// Production server
  EnvironmentProduction = 0,
/// Production Europe server
  EnvironmentProduction_Europe = 1,
/// Staging server
  EnvironmentStaging = 2,
/// Development server
  EnvironmentDevelopment = 3,
};

enum FlybitsRequestType : NSInteger;
@class NSHTTPURLResponse;

/// The base Flybits SDKs network request class.
SWIFT_CLASS("_TtC10FlybitsSDK14FlybitsRequest")
@interface FlybitsRequest : NSObject
/// Queue on which the completion block from response will be called. Uses main queue by default.
@property (nonatomic, strong) dispatch_queue_t _Null_unspecified completionCallbackQueue;
/// A flag that indicates whether any given API should be cached.
@property (nonatomic, readonly) BOOL isCachable;
/// Readonly access to the underlying NSURLRequest
@property (nonatomic, readonly, copy) NSURLRequest * _Nullable urlRequest;
/// Requests to wait before timing out when no data is retrieved – session is recreated so set this early as possible; Internally sets <code>NSURLSessionConfiguration.timeoutIntervalForRequest</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSTimeInterval timeoutIntervalForRequest;)
+ (NSTimeInterval)timeoutIntervalForRequest SWIFT_WARN_UNUSED_RESULT;
+ (void)setTimeoutIntervalForRequest:(NSTimeInterval)value;
/// Constructs a new request based on an NSURLRequest.
/// \param request An NSURLRequest object.
///
- (nonnull instancetype)initWithRequest:(NSURLRequest * _Nullable)request requestType:(enum FlybitsRequestType)type isCachable:(BOOL)isCachable error:(NSError * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Sets success status code
- (FlybitsRequest * _Nonnull)setHttpSuccessStatusCode:(NSInteger)httpSuccessStatusCode SWIFT_WARN_UNUSED_RESULT;
/// Sets success status code with lower..<upper bounds
- (FlybitsRequest * _Nonnull)setHttpSuccessStatusCodeWithLowerBound:(NSInteger)lower upperBound:(NSInteger)upper SWIFT_WARN_UNUSED_RESULT;
/// Uses Generics to serialize the server’s response into an object of the specified type.
/// \param completion A closure that returns the original request, the response, the serialized object and an error.
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object.
- (nonnull instancetype)responseWithCompletion:(void (^ _Nonnull)(NSURLRequest * _Nullable, NSHTTPURLResponse * _Nullable, NSData * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Cancels a FlybitsRequest.
- (FlybitsRequest * _Nonnull)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// The base Flybits SDK network request list class that handles multiple requests.
SWIFT_CLASS("_TtC10FlybitsSDK18FlybitsRequestList")
@interface FlybitsRequestList : FlybitsRequest
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
/// Default initializer with a list of FlybitsRequest objects
- (nonnull instancetype)initWithRequests:(NSArray<FlybitsRequest *> * _Nonnull)requests OBJC_DESIGNATED_INITIALIZER;
/// Cancels all requests
- (FlybitsRequest * _Nonnull)cancel SWIFT_WARN_UNUSED_RESULT;
/// Adds the request to the list
- (void)add:(FlybitsRequest * _Nonnull)request;
/// Removes the request from the list
- (void)remove:(FlybitsRequest * _Nonnull)request;
- (nonnull instancetype)initWithRequest:(NSURLRequest * _Nullable)request requestType:(enum FlybitsRequestType)type isCachable:(BOOL)isCachable error:(NSError * _Nullable)error SWIFT_UNAVAILABLE;
@end

/// A list of possible request types for a Requestable.
typedef SWIFT_ENUM(NSInteger, FlybitsRequestType) {
/// A core request (inherent to Flybits core, i.e. <code>Content</code>, <code>User</code>)
  FlybitsRequestTypeGateway = 0,
/// A rule request (<code>Rule</code> based requests)
  FlybitsRequestTypeRules = 1,
/// A context data update request
  FlybitsRequestTypeContextUpdate = 2,
/// A push request (<code>APNS</code> and <code>MQTT</code> based requests)
  FlybitsRequestTypePush = 3,
/// A custom request
  FlybitsRequestTypeCustom = 4,
};


/// The <code>FlybitsScope</code> protocol defines an SDK scope that enables or disables various capabilities
/// available through the SDKs.
/// Flybits modular SDKs are responsible for implementing the scope and define available functionality.
SWIFT_PROTOCOL("_TtP10FlybitsSDK12FlybitsScope_")
@protocol FlybitsScope <NSCoding>
/// Indicates that the connection was successfully made and appropriate actions
/// can be performed by the SDKs.
/// \param user The connected <code>User</code>.
///
- (void)onConnectedWithUser:(User * _Nonnull)user;
/// Indicates that the disconnection was successfully made and appropriate actions
/// can be performed by the SDKs.
- (void)onDisconnectedWithJwtToken:(NSString * _Nonnull)jwtToken;
/// Indicates that the account has been destroyed successfully and appropriate actions
/// can be performed by the SDKs.
- (void)onAccountDestroyedWithJwtToken:(NSString * _Nonnull)jwtToken;
- (void)onCachedDataRetrievedWithData:(id _Nonnull)data;
@end




/// Defines errors that can occur when fetching a new JWT.
typedef SWIFT_ENUM(NSInteger, JWTError) {
/// Max retries
  JWTErrorMaxRetries = 0,
};
static NSString * _Nonnull const JWTErrorDomain = @"FlybitsSDK.JWTError";

/// Defines errors that can occur during localization changes
typedef SWIFT_ENUM(NSInteger, LocalizationError) {
/// Unknown language code
  LocalizationErrorUnknownLanguageCode = 0,
/// Invalid format
  LocalizationErrorInvalidFormat = 1,
};
static NSString * _Nonnull const LocalizationErrorDomain = @"FlybitsSDK.LocalizationError";

/// Defines some of the error that can be return by Flybits for login related
/// issues. You might get any of those (SessionError, NetworkingRequestError,
/// CoreDataError, etc) as well as LoginError. <code>NSError.userInfo</code> will
/// tell you what data is missing or invalid.
typedef SWIFT_ENUM(NSInteger, LoginError) {
/// Missing field/property that is expected to be there for API to function
  LoginErrorMissingRequiredData = 0,
/// Invalid data is being sent for a property – i.e., sending email not in
/// the correct format, i.e., user@flybits,com (notice the comma).
  LoginErrorInvalidData = 1,
/// User already connected. Disconnect before connecting again.
  LoginErrorAlreadyConnected = 2,
};
static NSString * _Nonnull const LoginErrorDomain = @"FlybitsSDK.LoginError";




/// A structure containing many constants used internally in the SDK
SWIFT_CLASS("_TtC10FlybitsSDK7Network")
@interface Network : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Defines all the error that can be return by FlybitsSDK when request fails
/// for network reason, or internal server issues.
/// Note: NetworkingRequestError.FlybitsUnavailable is used as ‘Kill Switch’
typedef SWIFT_ENUM(NSInteger, NetworkingRequestError) {
/// Returned data is not the expected format
  NetworkingRequestErrorUnableToParseResponse = 0,
/// Request made is invalid
  NetworkingRequestErrorInvalidRequest = 1,
/// Kill switch – Flybits is deactivated on purpose
  NetworkingRequestErrorFlybitsUnavailable = 503,
/// You do not have access to call the API – may ProjectID is wrong?
  NetworkingRequestErrorUnauthorized = 401,
/// You do not have access to call the API – Are you logged out?
  NetworkingRequestErrorForbidden = 403,
/// Resource is not found – Invalid data is being post to server? or getting from server?
  NetworkingRequestErrorNotFound = 404,
/// Indicates that the application has exceeded its API usage limit for the project.
  NetworkingRequestErrorApiUsageExceeded = 429,
/// Posting data is empty
  NetworkingRequestErrorEmptyData = 430,
/// By default all http request is expected to be between 200 ..< 300 (HTTP success range)
  NetworkingRequestErrorExpectationNotMet = 431,
};
static NSString * _Nonnull const NetworkingRequestErrorDomain = @"FlybitsSDK.NetworkingRequestError";

enum SupportedIDP : NSInteger;

/// The <code>OAuthIDP</code> class is responsible for creating a specific Identity Provider (IDP) that
/// is managed by a OAuth based 3rd party integration such Facebook or Google.
SWIFT_CLASS("_TtC10FlybitsSDK8OAuthIDP")
@interface OAuthIDP : NSObject <IDP>
/// Initializer used to register an OAuth identity provider using <code>provider</code> name,
/// <code>accessToken</code> and <code>clientID</code> in order to successfully connect to the IDP.
/// \param provider The provider name of the OAuth provider.
///
/// \param accessToken The <code>accessToken</code> of the OAuth provider.
///
/// \param clientID The <code>clientID</code> of the OAuth provider.
///
- (nonnull instancetype)initWithProvider:(NSString * _Nonnull)provider accessToken:(NSString * _Nonnull)accessToken clientID:(NSString * _Nullable)clientID OBJC_DESIGNATED_INITIALIZER;
/// Initializer used to register the <code>SupportedIDP</code> OAuth identity provider using
/// <code>accessToken</code> and <code>clientID</code> in order to successfully connect to the IDP.
/// \param supportedIDP The <code>SupportedIDP</code> for the OAuth provider.
///
/// \param accessToken The <code>accessToken</code> of the OAuth provider.
///
/// \param clientID The <code>clientID</code> of the OAuth provider.
///
- (nonnull instancetype)initWithSupportedIDP:(enum SupportedIDP)supportedIDP accessToken:(NSString * _Nonnull)accessToken clientID:(NSString * _Nullable)clientID;
/// The Identity Provider name.
@property (nonatomic, readonly, copy) NSString * _Nonnull provider;
/// The unique identifier for the Flybits Project that this IDP should connect to.
@property (nonatomic, readonly, copy) NSString * _Nonnull projectID;
/// The URL Endpoint for the IDP to successfully connect.
@property (nonatomic, readonly, copy) NSString * _Nonnull authenticationEndPoint;
/// The HTTP(s) POST request body for connecting.
@property (nonatomic, readonly, copy) NSString * _Nonnull requestBody;
/// NSCoding decode initializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
/// NSCoding encode
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// The <code>SupportedIDP</code> enum indicates which OAuth based Identity Providers are supported by Flybits.
/// If the provider that you want to use is not listed here, you should use the initializer
/// that allows to pass in your provider name.
typedef SWIFT_ENUM(NSInteger, SupportedIDP) {
/// Facebook OAuth
  SupportedIDPFacebook = 0,
/// Google OAuth
  SupportedIDPGoogle = 1,
/// Okta OAuth
  SupportedIDPOkta = 2,
};


/// If there are lot of items to be returned, for performance reason, pagination should be used. Even if you do not indicate pagination, response might be paginated.
/// By setting <code>limit</code> and <code>offset</code>, you can retrieve different “pages” of data. For example, you might want to display first 20 items (experiences/content/etc). So, by using pagination as shown below, you will receive the first 20 items.
/// \code
/// // First 20 items or first page with 20 items
/// let pager = Pager(limit:20, offset:0)
///
/// \endcodeTo get the next page or next 20 items:
/// \code
/// // Second 20 items or second page with 20 items
/// let pager = Pager(limit:20, offset:20)
///
/// \endcode
SWIFT_CLASS("_TtC10FlybitsSDK5Pager")
@interface Pager : NSObject
/// The maximum number of records to return on this page.
/// Defaults to the <code>MaxResults</code> value if not provided or uses 1 if using a zero value.
@property (nonatomic, readonly) NSUInteger limit;
/// The offset into the total number of records at which to start the result set.
@property (nonatomic, readonly) NSUInteger offset;
/// The page offset used internally for the goto function
@property (nonatomic, readonly) NSUInteger pageIndex;
/// Failable initializer that returns a <code>Pager</code> based on the supplied representation.
/// \param response The response received from the server.
///
/// \param representation The raw data received from the server.
///
- (nullable instancetype)initWithResponseData:(id _Nonnull)responseData OBJC_DESIGNATED_INITIALIZER;
/// Updates the pager to a specific page index (limit/offset calculation is done for you)
/// \param pageIndex The page number.
///
- (void)goto:(NSUInteger)pageIndex;
/// Converts the pager into a dictionary (used when sent via an API request).
///
/// returns:
/// A dictionary containing the <code>limit</code> and <code>offset</code> properties.
/// Additionally, if non-nil, <code>sortBy</code> and <code>sortOrder</code> will be appended as well.
- (NSDictionary<NSString *, id> * _Nullable)toDictionary:(NSString * _Nullable)key error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Converts the pager to a set of parameters to be sent as part of a URL.
/// Intended to be used only with GET requests.
- (NSString * _Nonnull)toURLParamsWithKey:(NSString * _Nullable)key SWIFT_WARN_UNUSED_RESULT;
/// Convenience function to determine if the result set is at the end of the list.
///
/// returns:
/// <code>true</code> if there are additional results through which to page, <code>false</code> otherwise.
- (BOOL)hasMore SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum FlybitsUtilitiesOrderBy : NSInteger;
enum FlybitsUtilitiesSortOrder : NSInteger;

@interface Pager (SWIFT_EXTENSION(FlybitsSDK))
/// A public constructor for Objective-C clients.
/// \param limit The maximum number of records to return.
///
/// \param offset The offset into the record set.
///
/// \param sortBy A <code>String</code> of the property name to sort on.
///
/// \param sortOrder A <code>String</code> representing ascending or descending
/// sort order, namely, <code>asc</code> or <code>desc</code>. If the string is neither or is nil,
/// no sort will be applied.
///
///
/// returns:
/// A Pager object representing the provided limit and offset.
- (nonnull instancetype)initWithLimit:(NSUInteger)limit offset:(NSUInteger)offset orderBy:(enum FlybitsUtilitiesOrderBy)orderBy sortOrder:(enum FlybitsUtilitiesSortOrder)sortOrder;
@end


/// The <code>Project</code> class represents a specific project information
/// for a registered project with Flybits.
SWIFT_CLASS("_TtC10FlybitsSDK7Project")
@interface Project : NSObject
/// The unique identifier of the <code>Project</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Name of a project
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Subdomain of a project
@property (nonatomic, readonly, copy) NSString * _Nullable subdomain;
/// Creator id of a project
@property (nonatomic, readonly, copy) NSString * _Nullable creatorID;
/// Status of a project
@property (nonatomic, readonly) BOOL isActive;
/// Tier id of a project
@property (nonatomic, readonly, copy) NSString * _Nullable tierID;
/// Failable initializer that returns an <code>User</code> object based on the supplied representation.
/// \param response The response received from the server.
///
/// \param representation The raw data received from the server.
///
- (nullable instancetype)initWithResponseData:(id _Nonnull)responseData OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10FlybitsSDK10Properties")
@interface Properties : NSObject <NSCoding>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull items;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict;
- (nullable instancetype)initWithJson:(NSString * _Nonnull)json error:(NSError * _Nullable * _Nullable)error;
- (NSString * _Nullable)toJSON SWIFT_WARN_UNUSED_RESULT;
- (void)addProperty:(id _Nonnull)value forKey:(NSString * _Nonnull)key;
@end


/// Base class for creating queries to retrieve experiences/content.
/// When creating a query, you can define which fields to be included with the
/// response and which fields should be omitted. If the API supports pagination,
/// then certain chunk of data can be retrieved at one time using <code>Pager</code>.
/// You can subclass Query and override <code>func toDictionary() -> [String:String]</code> to
/// return key-value pairs which will be turned into the URL path for a request.
SWIFT_CLASS("_TtC10FlybitsSDK5Query")
@interface Query : NSObject
/// The pager object, used to page an API.
@property (nonatomic, strong) Pager * _Nullable pager;
/// Initializer with a <code>Pager</code> object for pagination.
/// \param pager Use Pager to indicate limit and offset for the items.
///
- (nonnull instancetype)init:(Pager * _Nullable)pager OBJC_DESIGNATED_INITIALIZER;
/// Returns key-value pair for URL path
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns string by joining the toDictionary key-value pairs using & separator
- (NSString * _Nullable)toURLParams SWIFT_WARN_UNUSED_RESULT;
/// Override to pretty-print the <code>Query</code>’s debug description.
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Override to pretty-print the <code>Query</code>’s description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Defines errors that can occur when creating query to fetch data from server.
typedef SWIFT_ENUM(NSInteger, QueryExpressionError) {
/// Not supported
  QueryExpressionErrorUnsupported = 0,
};
static NSString * _Nonnull const QueryExpressionErrorDomain = @"FlybitsSDK.QueryExpressionError";

/// Defines some of the error that can be return by Flybits when registered
/// new user. You might get any of those (SessionError, NetworkingRequestError,
/// CoreDataError, etc) as well as RegistrationError. <code>NSError.userInfo</code> will
/// tell you what data is missing or invalid.
typedef SWIFT_ENUM(NSInteger, RegistrationError) {
/// Missing field/property that is expected to be there for API to function
  RegistrationErrorMissingRequiredData = 0,
/// Invalid data is being sent for a property – i.e., sending email not in
/// the correct format, i.e., user@flybits,com (notice the comma).
  RegistrationErrorInvalidData = 1,
};
static NSString * _Nonnull const RegistrationErrorDomain = @"FlybitsSDK.RegistrationError";


/// The <code>SharedElements</code> class is responsible for managing various session based information
/// that can be shared across Flybits SDKs.
SWIFT_CLASS("_TtC10FlybitsSDK14SharedElements")
@interface SharedElements : NSObject
/// Unique Flybits Project ID.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable projectID;)
+ (NSString * _Nullable)projectID SWIFT_WARN_UNUSED_RESULT;
/// Device ID of the connected user.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable deviceID;)
+ (NSString * _Nullable)deviceID SWIFT_WARN_UNUSED_RESULT;
/// User ID of the connected user.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable userID;)
+ (NSString * _Nullable)userID SWIFT_WARN_UNUSED_RESULT;
/// Connected IDP provider name.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable connectedIDP;)
+ (NSString * _Nullable)connectedIDP SWIFT_WARN_UNUSED_RESULT;
/// JWT token of the connected user.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable jwtToken;)
+ (NSString * _Nullable)jwtToken SWIFT_WARN_UNUSED_RESULT;
/// Language codes for localizations.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nullable languageCodes;)
+ (NSArray<NSString *> * _Nullable)languageCodes SWIFT_WARN_UNUSED_RESULT;
/// Scopes
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<id <FlybitsScope>> * _Nullable scopes;)
+ (NSArray<id <FlybitsScope>> * _Nullable)scopes SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>SignedIDP</code> class is responsible for creating a specific Identity Provider (IDP) that
/// can be logged into using the SAML protocol.
SWIFT_CLASS("_TtC10FlybitsSDK9SignedIDP")
@interface SignedIDP : NSObject <IDP>
/// Initializer used to register a Signed identity provider using <code>provider</code>,
/// <code>accessToken</code> and <code>clientID</code> in order to successfully connect to the IDP.
/// \param accessToken The <code>accessToken</code> of the OAuth provider.
///
/// \param signature The <code>signature</code> of the OAuth provider.
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nonnull)accessToken signature:(NSString * _Nonnull)signature OBJC_DESIGNATED_INITIALIZER;
/// The Identity Provider name.
@property (nonatomic, readonly, copy) NSString * _Nonnull provider;
/// The unique identifier for the Flybits Project that this IDP should connect to.
@property (nonatomic, readonly, copy) NSString * _Nonnull projectID;
/// The URL Endpoint for the IDP to successfully connect.
@property (nonatomic, readonly, copy) NSString * _Nonnull authenticationEndPoint;
/// The HTTP(s) POST request body for connecting.
@property (nonatomic, readonly, copy) NSString * _Nonnull requestBody;
/// NSCoding decode initializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
/// NSCoding encode
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Defines errors that can occur when using toDictionary.
typedef SWIFT_ENUM(NSInteger, ToDictionaryError) {
/// Invalid Coordinate
  ToDictionaryErrorInvalidCoordinate = 0,
};
static NSString * _Nonnull const ToDictionaryErrorDomain = @"FlybitsSDK.ToDictionaryError";


/// The <code>User</code> class represents a specific user and is used to store information
/// about a person who has registered an account with Flybits.
SWIFT_CLASS("_TtC10FlybitsSDK4User")
@interface User : NSObject
/// The unique identifier of the <code>User</code> (<code>identifier</code> in Objective-C).
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Device user currently logged in.
@property (nonatomic, readonly, copy) NSString * _Nullable deviceID;
/// First name
@property (nonatomic, copy) NSString * _Nullable firstname;
/// Last name
@property (nonatomic, copy) NSString * _Nullable lastname;
/// Email
@property (nonatomic, copy) NSString * _Nullable email;
/// Failable initializer that returns an <code>User</code> object based on the supplied representation.
/// \param response The response received from the server.
///
/// \param representation The raw data received from the server.
///
- (nullable instancetype)initWithResponseData:(id _Nonnull)responseData OBJC_DESIGNATED_INITIALIZER;
/// Compares two <code>User</code>s for equality.
/// \param object Another <code>User</code> (<code>NSObject.isEqual()</code> is used if object is not a <code>User</code>).
///
///
/// returns:
/// <code>true</code> if two <code>User</code>s have the same <code>id</code>, <code>false</code> otherwise.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The <code>User</code>’s hash value (used when treated as an <code>NSObject</code>).
@property (nonatomic, readonly) NSUInteger hash;
/// The <code>User</code>’s hash value (used when treated as an <code>NSObject</code>).
@property (nonatomic, readonly) NSInteger hashValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class NSDateFormatter;

/// A set of utilities to access common iOS properties.
SWIFT_CLASS_NAMED("Utilities")
@interface FlybitsUtilities : NSObject
/// Determines whether or not this is a simulator build.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL IsSimulator;)
+ (BOOL)IsSimulator SWIFT_WARN_UNUSED_RESULT;
/// The Flybits SDK version number in the Major.Minor.Patch format.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// The Vendor <code>UUID</code> returned from UIDevice.currentDevice().identifierForVendor (handles nullable type)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull vendorUUID;)
+ (NSString * _Nonnull)vendorUUID SWIFT_WARN_UNUSED_RESULT;
/// Formats date using format “yyyy-MM-dd’T’HH:mm:ss’Z’”
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSDateFormatter * _Nonnull dateFormatter;)
+ (NSDateFormatter * _Nonnull)dateFormatter SWIFT_WARN_UNUSED_RESULT;
/// Creates user info dictionary for NSError
+ (NSDictionary<NSString *, id> * _Nonnull)CreateNSErrorUserInfo:(NSString * _Nonnull)description failure:(NSString * _Nullable)failure recovery:(NSString * _Nullable)recovery SWIFT_WARN_UNUSED_RESULT;
/// Device type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceType;)
+ (NSString * _Nonnull)deviceType SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull deviceName;)
+ (NSString * _Nonnull)deviceName SWIFT_WARN_UNUSED_RESULT;
+ (void)setDeviceName:(NSString * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface FlybitsUtilities (SWIFT_EXTENSION(FlybitsSDK))
@end

/// Sort order allows to sort Content based on different fields.
typedef SWIFT_ENUM_NAMED(NSInteger, FlybitsUtilitiesSortOrder, "SortOrder") {
/// Results should be sorted in <code>Ascending</code> order
  FlybitsUtilitiesSortOrderAscending = 0,
/// Results should be sorted in <code>Descending</code> order
  FlybitsUtilitiesSortOrderDescending = 1,
};

/// Order by allows to sort and order Content based on different fields.
typedef SWIFT_ENUM_NAMED(NSInteger, FlybitsUtilitiesOrderBy, "OrderBy") {
/// Results should be ordered by Content’s priority index
  FlybitsUtilitiesOrderByPriority = 0,
/// Results should be ordered by the time the Content associated rule was last evaluated
  FlybitsUtilitiesOrderByEvaluatedAt = 1,
/// Results should be ordered by the time the Content was created
  FlybitsUtilitiesOrderByCreatedAt = 2,
/// Results should be ordered by the time the Content was last modified
  FlybitsUtilitiesOrderByModifiedAt = 3,
};

/// Length units
typedef SWIFT_ENUM_NAMED(NSInteger, FlybitsUtilitiesLengthUnit, "LengthUnit") {
/// Units in meters
  FlybitsUtilitiesLengthUnitMeters = 0,
/// Units in miles
  FlybitsUtilitiesLengthUnitMiles = 1,
/// Units in kilometers
  FlybitsUtilitiesLengthUnitKilometers = 2,
/// Units in yards
  FlybitsUtilitiesLengthUnitYards = 3,
/// Units in feet
  FlybitsUtilitiesLengthUnitFeet = 4,
};

/// Time units
typedef SWIFT_ENUM_NAMED(NSInteger, FlybitsUtilitiesTimeUnit, "TimeUnit") {
/// Seconds unit
  FlybitsUtilitiesTimeUnitSeconds = 1,
/// Minutes unit
  FlybitsUtilitiesTimeUnitMinutes = 60,
/// Hours unit
  FlybitsUtilitiesTimeUnitHours = 3600,
/// Days unit
  FlybitsUtilitiesTimeUnitDays = 86400,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
