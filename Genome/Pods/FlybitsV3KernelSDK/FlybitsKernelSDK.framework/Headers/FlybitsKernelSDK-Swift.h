// Generated by Apple Swift version 4.1 effective-3.3 (swiftlang-902.0.48 clang-902.0.37.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import FlybitsSDK;
@import CoreLocation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FlybitsKernelSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class ContentQuery;
@class FlybitsRequest;
@class ContentDataQuery;

/// The <code>Content</code> class is responsible for defining necessary requests
/// that allows fetching or updating <code>ContentData</code>.
SWIFT_CLASS("_TtC16FlybitsKernelSDK7Content")
@interface Content : NSObject
/// A unique identifier used for an instance of this class.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// A project identifier linking an instance of this class to a project.
@property (nonatomic, readonly, copy) NSString * _Nullable tenantId;
/// A template identifier corresponding to a Content Template definition on the Flybits Developer Portal (https://devportal.flybits.com)
@property (nonatomic, readonly, copy) NSString * _Nullable templateId;
/// An optional array of <code>String</code>s useful for selecting a subset of <code>Content</code> instances or providing additional categorical information that can be used and leveraged in a multitude of ways.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable labels;
/// A created at property using epoch time.
@property (nonatomic, readonly) double createdAt;
/// A modified at property using epoch time.
@property (nonatomic, readonly) double modifiedAt;
/// An icon url string used for fetching the icon as set in the Experience Studio for your project.
@property (nonatomic, readonly, copy) NSString * _Nullable iconUrl;
/// A metadata dictionary used for very specific purposes.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable metadata;
/// A readonly surveyMetadata dictionary used for identifying associated content instances.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable surveyMetadata;
/// A required initializer used by the FlybitsSDK to deserialize a <code>Content</code> instance.
/// \param responseData A dictionary with all required <code>Content</code> instance properties
/// and some optional properties.
///
- (nullable instancetype)initWithResponseData:(id _Nonnull)responseData OBJC_DESIGNATED_INITIALIZER;
/// The <code>getInstance</code> method is responsible for fetching a single <code>Content</code> instance.
/// This method does not request or fill in <code>ContentData</code> associated to <code>Content</code>.
/// \param identifier A string identifier for a <code>Content</code> instance.
///
/// \param query A <code>ContentQuery</code> object specifying the <code>ContentData</code> type. If supplied and not nil (default is nil),
/// this data will be retrieved. Otherwise, only a <code>Content</code> instance’s properties will be instantiated.
///
/// \param completion A closure that returns a <code>Content</code> instance on success or an <code>NSError</code> on failure.
///
///
/// returns:
/// A cancellable FlybitsRequest or nil if the user is unauthenticated.
+ (FlybitsRequest * _Nullable)getInstanceWithIdentifier:(NSString * _Nonnull)identifier query:(ContentQuery * _Nullable)query completion:(void (^ _Nonnull)(Content * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// The <code>addInstance</code> method is responsible for adding a single <code>Content</code> object. Before
/// adding content, it’s useful to associate all Content Data IDs you wish to exist
/// as part of this content using the <code>content</code> property on <code>Content</code>.
/// \param content The <code>Content</code> instance you wish to add to your project.
///
/// \param completion A closure that returns a <code>Content</code> instance on success or an <code>NSError</code> on failure.
///
///
/// returns:
/// A cancellable FlybitsRequest or nil if the user is unauthenticated.
+ (FlybitsRequest * _Nullable)addInstance:(Content * _Nonnull)content completion:(void (^ _Nonnull)(Content * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// The <code>updateInstance</code> method is responsible for updating a single <code>Content</code> object. Before
/// issuing an update, remember to set the <code>content</code> property with all associated <code>Content</code>.
/// \param content The <code>Content</code> instance you wish to update on your project.
///
/// \param completion A closure that returns a <code>Content</code> instance on success or an <code>NSError</code> on failure.
///
///
/// returns:
/// A cancellable FlybitsRequest or nil if the user is unauthenticated.
+ (FlybitsRequest * _Nullable)updateInstance:(Content * _Nonnull)content completion:(void (^ _Nonnull)(Content * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// The <code>deleteInstance</code> method is responsible for deleting a single <code>Experience</code> object. Deleting an
/// experience will not delete any content that may already be associated with it using the <code>contentIds</code>
/// property.
/// \param identifier A string identifier for a <code>Content</code> instance.
///
/// \param completion A closure that returns an <code>NSError</code> on failure.
///
///
/// returns:
/// A cancellable FlybitsRequest or nil if the user is unauthenticated.
+ (FlybitsRequest * _Nullable)deleteInstanceWithIdentifier:(NSString * _Nonnull)identifier completion:(void (^ _Nonnull)(NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Deletes content data from a Content identifier.
/// \param identifier A string identifier for a <code>ContentData</code> instance.
///
/// \param query A <code>ContentDataQuery</code> object specifying the parent <code>Content</code> instance identifier of the <code>ContentData</code> you want to delete.
///
/// \param completion A closure that returns a <code>Content</code> object on success or an <code>NSError</code> on failure
///
///
/// returns:
/// A cancellable FlybitsRequest or nil if the user is unauthenticated.
+ (FlybitsRequest * _Nullable)deleteDataWithIdentifier:(NSString * _Nonnull)identifier query:(ContentDataQuery * _Nonnull)query completion:(void (^ _Nonnull)(NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Use this to create a dictionary representation of this <code>Content</code> instance. Used for
/// converting to JSON when adding or updating data on the server.
///
/// returns:
/// A dictionary representing a <code>Content</code> instance.
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class ContentData;
@class Pager;

@interface Content (SWIFT_EXTENSION(FlybitsKernelSDK))
/// Objective-C wrapper - Get <code>Content</code>’s name in the order of <code>preferredLocale</code> or <code>defaultLocale</code>.
- (NSString * _Nullable)contentName SWIFT_WARN_UNUSED_RESULT;
/// Objective-C wrapper - Get <code>Content</code>’s localized name for the specific locale with <code>languageCode</code>. Default value = “”
- (NSString * _Nullable)localizedContentName:(NSLocale * _Nonnull)locale SWIFT_WARN_UNUSED_RESULT;
/// Objective-C wrapper - Get <code>Content</code>’s description in the order of <code>preferredLocale</code> or <code>defaultLocale</code>.
- (NSString * _Nullable)contentDesc SWIFT_WARN_UNUSED_RESULT;
/// Objective-C wrapper - Get <code>Content</code>’s localized name for the specific locale with <code>languageCode</code>. Default value = “”
- (NSString * _Nullable)localizedContentDesc:(NSLocale * _Nonnull)locale SWIFT_WARN_UNUSED_RESULT;
/// Objective-C wrapper - Get <code>Content</code>’s paged content data list.
- (NSArray<ContentData *> * _Nullable)pagedContentDataList SWIFT_WARN_UNUSED_RESULT;
/// Objective-C wrapper - Get <code>Content</code>’s paged content data pager.
- (Pager * _Nullable)pagedContentDataPager SWIFT_WARN_UNUSED_RESULT;
/// Objective-C wrapper - Creates a new <code>Content</code> with unlocalized name and description
+ (Content * _Nonnull)contentWith:(NSString * _Nonnull)templateId name:(NSString * _Nonnull)name description:(NSString * _Nonnull)description SWIFT_WARN_UNUSED_RESULT;
@end

@class LocationContentData;

/// The <code>ContentData</code> class is responsible for defining base model
/// for parsing content data.
SWIFT_CLASS("_TtC16FlybitsKernelSDK11ContentData")
@interface ContentData : NSObject
/// A unique identifier used for an instance of this class.
@property (nonatomic, readonly, copy) NSString * _Nullable identifier;
/// A unique identifier used for a parent <code>Content</code> instance for this object.
@property (nonatomic, copy) NSString * _Nullable contentInstanceId;
/// A location based <code>ContentData</code> associated to the content data
@property (nonatomic, readonly, strong) LocationContentData * _Nullable locationContentData;
/// Use this to create a dictionary representation of this <code>ContentData</code> object. Used for
/// converting to JSON when adding or updating data on the server.
///
/// returns:
/// A dictionary representing a <code>ContentData</code> object.
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// The <code>ContentDataQuery</code> class is responsible for defining the set of compatible
/// query parameters for a <code>ContentData</code> object.
SWIFT_CLASS("_TtC16FlybitsKernelSDK16ContentDataQuery")
@interface ContentDataQuery : Query
/// The <code>Content</code> instance any <code>ContentData</code> is a child of.
@property (nonatomic, copy) NSString * _Nullable instanceIdentifier;
/// This is the array object’s key name as defined in the Content Template in
/// the developer portal. <code>https://devportal.flybits.com</code>
@property (nonatomic, copy) NSString * _Nullable key;
/// The recommended way to create a <code>ContentDataQuery</code> object because any <code>ContentData</code> requires
/// a parent <code>Content</code> instance identifier before any operation can be performed.
/// \param instanceIdentifier A <code>Content</code> instance identifier for this <code>ContentData</code>’s parent.
///
/// \param key An optional key matching the field value of an array defined in the developer portal
/// (https://devportal.flybits.com). This is to be used when you have a lot of data that you want to
/// load incrementally using a <code>Paged</code> object.
///
/// \param pager A <code>Pager</code> that specifies the limit and offset that you wish to load for use with
/// an array of items.
///
- (nonnull instancetype)initWithInstanceIdentifier:(NSString * _Nonnull)instanceIdentifier key:(NSString * _Nullable)key pager:(Pager * _Nullable)pager;
/// A basic initializer that is not recommended for use as you are required to have a <code>Content</code> instance
/// identifier set to get this data.
/// Please use the convenience initializer <code>init(instanceIdentifier:key:pager:)</code>
/// \param pager A <code>Pager</code> that specifies the limit and offset that you wish to load for use with
/// an array of items.
///
- (nonnull instancetype)init:(Pager * _Nullable)pager OBJC_DESIGNATED_INITIALIZER;
/// Creates a dictionary of URL parameters to be used when making any <code>ContentData</code> request.
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

@class LocationQuery;

/// The <code>ContentQuery</code> class is responsible for defining the set of compatible
/// query parameters for a <code>Content</code> object.
SWIFT_CLASS("_TtC16FlybitsKernelSDK12ContentQuery")
@interface ContentQuery : Query
/// The optional <code>types</code> dictionary is required for when you want to have your custom <code>ContentData</code>
/// properties to be fetched and deserialized. Without providing this, the request will retrieve
/// <code>Content</code> instances without any <code>ContentData</code>.
@property (nonatomic, copy) NSDictionary<NSString *, SWIFT_METATYPE(ContentData)> * _Nullable types;
/// The optional <code>labels</code> property provides a way to retrieve Experiences with only that
/// specific label(s).
@property (nonatomic, copy) NSArray<NSString *> * _Nullable labels;
/// An optional LocationQuery object useful for location-based <code>Content</code>.
@property (nonatomic, strong) LocationQuery * _Nullable locationQuery;
/// Use this initializer when you want to deserialize your custom <code>ContentData</code> object types using the <code>types</code> property.
/// Specifying a <code>Pager</code> object that indicates a limit and offset of your dataset.
/// Specifying a <code>labels</code> string array will limit your query to retrieving <code>Content</code> instances
/// with those said labels.
/// \param types A dictionary specifying the <code>ContentData</code> models that should be deserialized.
///
/// \param labels An array of <code>String</code>s useful for selecting a subset of <code>Content</code> instances or providing additional categorical information.
///
/// \param pager A <code>Pager</code> object that describes the limit and offset of an array of <code>Content</code> instances.
///
- (nonnull instancetype)initWithTypes:(NSDictionary<NSString *, SWIFT_METATYPE(ContentData)> * _Nullable)types labels:(NSArray<NSString *> * _Nullable)labels pager:(Pager * _Nullable)pager;
/// Can create a basic <code>ContentQuery</code> object. This may only be useful for retrieving an array <code>Content</code>
/// instance without any <code>ContentData</code>. To get <code>ContentData</code>, the <code>types</code> property must be set with
/// the appropriate Content Template identifiers as keys and class types descending from the <code>ContentData</code>
/// class as values.
/// Not generally recommended for use. Please use the convenience initializer <code>init(types:labels:pager:)</code>
- (nonnull instancetype)init:(Pager * _Nullable)pager OBJC_DESIGNATED_INITIALIZER;
/// Creates a dictionary of URL parameters to be used when making any <code>Content</code> request.
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>Experience</code> class is a container for <code>Content</code> instances.
SWIFT_CLASS("_TtC16FlybitsKernelSDK10Experience")
@interface Experience : NSObject
/// A unique identifier used for an instance of this class.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// A project identifier linking an instance of this class to a project.
@property (nonatomic, readonly, copy) NSString * _Nullable tenantId;
/// A unique identifier used to enable this <code>Experience</code> based on a user’s context values.
@property (nonatomic, readonly, copy) NSString * _Nullable ruleId;
/// A user’s identifier that created this <code>Experience</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable creatorId;
/// An array of <code>Content</code> identifiers as part of this <code>Experience</code> object.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable contentIds;
/// An array of <code>Group</code> identifiers that describe what <code>Groups</code>s this <code>Experience</code> belong to.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable groupIds;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable rule;
/// An array of <code>Content</code> as part of this <code>Experience</code> object.
@property (nonatomic, readonly, copy) NSArray<Content *> * _Nullable contents;
/// An optional array of <code>String</code>s useful for selecting a subset of <code>Content</code> instances or providing additional categorical information that can be used and leveraged in a multitude of ways.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable labels;
/// Describes if this <code>Experience</code> is active or not.
@property (nonatomic, readonly) BOOL isActive;
/// A created at property using epoch time.
@property (nonatomic, readonly) double createdAt;
/// A modified at property using epoch time.
@property (nonatomic, readonly) double modifiedAt;
/// A required initializer used by the FlybitsSDK to deserialize a <code>Experience</code> object.
/// \param responseData A dictionary with all required <code>Experience</code> object properties
/// and some optional properties.
///
- (nullable instancetype)initWithResponseData:(id _Nonnull)responseData OBJC_DESIGNATED_INITIALIZER;
/// The <code>get</code> method is responsible for fetching a single <code>Experience</code> object. This
/// method does not request or fill in <code>Content</code> associated to <code>Experience</code>.
/// You must do this with a second request using <code>Content</code> static functions.
/// \param id A string identifier for an <code>Experience</code> object.
///
/// \param completion A closure that returns a <code>Paged<Experience></code> object on success or an <code>NSError</code> on failure.
///
///
/// returns:
/// A cancellable FlybitsRequest or nil if the user is unauthenticated.
+ (FlybitsRequest * _Nullable)getWithId:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(Experience * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// The <code>add</code> method is responsible for adding a single <code>Experience</code> object. Before
/// adding an experience, it’s useful to associate all Content IDs you wish to exist
/// as part of this experience using the <code>contentIds</code> property on <code>Experience</code>.
/// \param experience An <code>Experience</code> object.
///
/// \param completion A closure that returns a <code>Experience</code> object on success or an <code>NSError</code> on failure.
///
///
/// returns:
/// A cancellable FlybitsRequest or nil if the user is unauthenticated.
+ (FlybitsRequest * _Nullable)add:(Experience * _Nonnull)experience completion:(void (^ _Nonnull)(Experience * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// The <code>update</code> method is responsible for updating a single <code>Experience</code> object. Before
/// issuing an update, remember to set the <code>contentIds</code> property with all associated <code>Content</code>.
/// \param experience An <code>Experience</code> object.
///
/// \param completion A closure that returns a <code>Experience</code> object on success or an <code>NSError</code> on failure.
///
///
/// returns:
/// A cancellable FlybitsRequest or nil if the user is unauthenticated.
+ (FlybitsRequest * _Nullable)update:(Experience * _Nonnull)experience completion:(void (^ _Nonnull)(Experience * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// The <code>delete</code> method is responsible for deleting a single <code>Experience</code> object. Deleting an
/// experience will not delete any content that may already be associated with it using the <code>contentIds</code>
/// property.
/// \param id A string identifier for an <code>Experience</code> object.
///
/// \param completion A closure that returns an <code>NSError</code> on failure.
///
///
/// returns:
/// A cancellable FlybitsRequest or nil if the user is unauthenticated.
+ (FlybitsRequest * _Nullable)deleteWithId:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Use this to create a dictionary representation of this Experience object. Used for
/// converting to JSON when adding or updating data on the server.
///
/// returns:
/// A dictionary representing an <code>Experience</code>.
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface Experience (SWIFT_EXTENSION(FlybitsKernelSDK))
/// Objective-C wrapper - Get <code>Experience</code>’s name in the order of <code>preferredLocale</code> or <code>defaultLocale</code>.
- (NSString * _Nullable)experienceName SWIFT_WARN_UNUSED_RESULT;
/// Objective-C wrapper - Get <code>Experience</code>’s localized name for the specific locale with <code>languageCode</code>. Default value = “”
- (NSString * _Nullable)localizedExperienceName:(NSLocale * _Nonnull)locale SWIFT_WARN_UNUSED_RESULT;
/// Objective-C wrapper - Get <code>Experience</code>’s description in the order of <code>preferredLocale</code> or <code>defaultLocale</code>.
- (NSString * _Nullable)experienceDesc SWIFT_WARN_UNUSED_RESULT;
/// Objective-C wrapper - Get <code>Experience</code>’s localized name for the specific locale with <code>languageCode</code>. Default value = “”
- (NSString * _Nullable)localizedExperienceDesc:(NSLocale * _Nonnull)locale SWIFT_WARN_UNUSED_RESULT;
/// Objective-C wrapper - Creates a new <code>Experience</code> with unlocalized name and description
+ (Experience * _Nonnull)experienceWith:(NSString * _Nonnull)name description:(NSString * _Nonnull)description SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>ExperienceQuery</code> class is responsible for defining the set of compatible
/// query parameters for an <code>Experience</code> object.
SWIFT_CLASS("_TtC16FlybitsKernelSDK15ExperienceQuery")
@interface ExperienceQuery : Query
/// The optional <code>labels</code> property provides a way to retrieve Experiences with
/// only that specific label(s).
@property (nonatomic, copy) NSArray<NSString *> * _Nullable labels;
/// Use this initializer when you want to deserialize your custom <code>ContentData</code> object types.
/// Specifying a <code>labels</code> string array will limit your query to retrieving <code>Content</code> instances
/// with those said labels.
/// Specifying a <code>Pager</code> object that indicates a limit and offset of your dataset.
/// \param labels An array of <code>String</code>s useful for selecting a subset of <code>Experience</code> objects or providing additional categorical information.
///
/// \param pager A <code>Pager</code> object that describes the limit and offset of an array of <code>Experience</code> objects.
///
- (nonnull instancetype)initWithLabels:(NSArray<NSString *> * _Nullable)labels pager:(Pager * _Nullable)pager;
/// Can create a basic <code>ExperienceQuery</code> object. It is recommended that you use the <code>init(types:labels:pager:)</code> convenience initializer instead.
- (nonnull instancetype)init:(Pager * _Nullable)pager OBJC_DESIGNATED_INITIALIZER;
/// Creates a dictionary of URL parameters to be used when making any <code>Experience</code> request.
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>Group</code> class is a container for <code>Experience</code>s.
SWIFT_CLASS("_TtC16FlybitsKernelSDK5Group")
@interface Group : NSObject
/// A unique identifier used for an instance of this class.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// A project identifier linking an instance of this class to a project.
@property (nonatomic, readonly, copy) NSString * _Nullable tenantId;
/// A user’s identifier that created this <code>Group</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable creatorId;
/// An array of <code>Experience</code>s that are a part of this <code>Group</code>.
@property (nonatomic, readonly, copy) NSArray<Experience *> * _Nullable experiences;
/// A created at property using epoch time.
@property (nonatomic, readonly) double createdAt;
/// A modified at property using epoch time.
@property (nonatomic, readonly) double modifiedAt;
/// A required initializer used by the FlybitsSDK to deserialize a <code>Group</code> object.
/// \param responseData A dictionary with all required <code>Group</code> object properties
/// and some optional properties.
///
- (nullable instancetype)initWithResponseData:(id _Nonnull)responseData OBJC_DESIGNATED_INITIALIZER;
/// The <code>get</code> method is responsible for fetching a single <code>Group</code> object. This
/// method does not request or fill in <code>Experience</code>s associated to a <code>Group</code>.
/// You must do this with a second request using <code>Experience</code> static functions.
/// \param id A string identifier for a <code>Group</code> object.
///
/// \param completion A closure that returns a <code>Paged<Group></code> object on success or an <code>NSError</code> on failure.
///
///
/// returns:
/// A cancellable FlybitsRequest or nil if the user is unauthenticated.
+ (FlybitsRequest * _Nullable)getWithId:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(Group * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// The <code>add</code> method is responsible for adding a single <code>Group</code> object. Before
/// adding a group, it’s useful to associate all Experience IDs you wish to exist
/// as part of this group using the <code>experiences</code> property on <code>Group</code>.
/// \param experience An <code>Group</code> object.
///
/// \param completion A closure that returns a <code>Group</code> object on success or an <code>NSError</code> on failure.
///
///
/// returns:
/// A cancellable FlybitsRequest or nil if the user is unauthenticated.
+ (FlybitsRequest * _Nullable)add:(Group * _Nonnull)group completion:(void (^ _Nonnull)(Group * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// The <code>update</code> method is responsible for updating a single <code>Group</code> object. Before
/// issuing an update, remember to set the <code>experiences</code> property with all associated <code>Experience</code>s.
/// \param experience A <code>Group</code> object.
///
/// \param completion A closure that returns a <code>Group</code> object on success or an <code>NSError</code> on failure.
///
///
/// returns:
/// A cancellable FlybitsRequest or nil if the user is unauthenticated.
+ (FlybitsRequest * _Nullable)update:(Group * _Nonnull)group completion:(void (^ _Nonnull)(Group * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// The <code>delete</code> method is responsible for deleting a single <code>Group</code> object. Deleting a
/// group will not delete any experiences that may already be associated with it using the <code>experiences</code>
/// property.
/// \param id A string identifier for a <code>Group</code> object.
///
/// \param completion A closure that returns an <code>NSError</code> on failure.
///
///
/// returns:
/// A cancellable FlybitsRequest or nil if the user is unauthenticated.
+ (FlybitsRequest * _Nullable)deleteWithId:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Use this to create a dictionary representation of this Group object. Used for
/// converting to JSON when adding or updating data on the server.
///
/// returns:
/// A dictionary representing a <code>Group</code>.
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface Group (SWIFT_EXTENSION(FlybitsKernelSDK))
/// Objective-C wrapper - Get <code>Group</code>’s name in the order of <code>preferredLocale</code> or <code>defaultLocale</code>.
- (NSString * _Nullable)groupName SWIFT_WARN_UNUSED_RESULT;
/// Objective-C wrapper - Get <code>Group</code>’s localized name for the specific locale with <code>languageCode</code>. Default value = “”
- (NSString * _Nullable)localizedGroupName:(NSLocale * _Nonnull)locale SWIFT_WARN_UNUSED_RESULT;
/// Objective-C wrapper - Get <code>Group</code>’s description in the order of <code>preferredLocale</code> or <code>defaultLocale</code>.
- (NSString * _Nullable)groupDesc SWIFT_WARN_UNUSED_RESULT;
/// Objective-C wrapper - Get <code>Group</code>’s localized name for the specific locale with <code>languageCode</code>. Default value = “”
- (NSString * _Nullable)localizedGroupDesc:(NSLocale * _Nonnull)locale SWIFT_WARN_UNUSED_RESULT;
/// Objective-C wrapper - Creates a new <code>Group</code> with unlocalized name and description
+ (Group * _Nonnull)groupWith:(NSString * _Nonnull)name description:(NSString * _Nonnull)description SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>GroupQuery</code> class is responsible for defining the set of compatible
/// query parameters for a <code>Group</code> object.
SWIFT_CLASS("_TtC16FlybitsKernelSDK10GroupQuery")
@interface GroupQuery : Query
/// Creates a dictionary of URL parameters to be used when making any <code>Group</code> request.
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(Pager * _Nullable)pager OBJC_DESIGNATED_INITIALIZER;
@end


/// KernelAPIManager is a wrapper for use with Objective-C based projects.
/// All Swift based projects should use the Requestable enums such as SessionRequest, ZoneRequest or UserRequest.
SWIFT_CLASS("_TtC16FlybitsKernelSDK16KernelAPIManager")
@interface KernelAPIManager : NSObject
/// The <code>getAllGroups</code> method is responsible for fetching all group instances. This
/// method does not request or fill in <code>Experience</code>s associated to any given <code>Group</code>,
/// it merely. You must do this with a second request using <code>Experience</code> static functions.
/// \param query An optional <code>GroupQuery</code> object to help specify any parameters when making requests for a <code>Group</code> or <code>Group</code>s.
///
/// \param completion A closure that returns a <code>Paged<Group></code> object on success or an <code>NSError</code> on failure
///
///
/// returns:
/// A cancellable <code>FlybitsRequest</code> object
+ (FlybitsRequest * _Nullable)getAllGroups:(GroupQuery * _Nullable)query completion:(void (^ _Nonnull)(NSArray<Group *> * _Nullable, Pager * _Nullable, NSError * _Nullable))completion;
/// The <code>getAllExperiences</code> method is responsible for fetching all <code>Experience</code> objects. This
/// method does not request or fill in <code>Content</code> associated to an <code>Experience</code>.
/// You must do this with a second request using <code>Content</code> static functions.
/// \param query A <code>ContentQuery</code> object that describes the <code>ContentData</code> types that we can deserialize for, labels useful for selecting a subset of <code>Content</code> instances or providing additional categorical information and pager used for pagination of large array datasets.
///
/// \param completion A closure that returns a <code>Paged<Experience></code> object on success or an <code>NSError</code> on failure.
///
///
/// returns:
/// A cancellable FlybitsRequest or nil if the user is unauthenticated.
+ (FlybitsRequest * _Nullable)getAllExperiences:(ExperienceQuery * _Nullable)query completion:(void (^ _Nonnull)(NSArray<Experience *> * _Nullable, Pager * _Nullable, NSError * _Nullable))completion;
/// The <code>getAll</code> method is responsible for fetching all content instances including
/// associated content data that are relevant to a user based on their Context.
/// \param query A <code>ContentQuery</code> object that describes the <code>ContentData</code> types that we can deserialize for, labels useful for selecting a subset of <code>Content</code> instances or providing additional categorical information and pager used for pagination of large array datasets.
///
/// \param completion A closure that returns the <code>Paged<Content></code> object on success or an <code>NSError</code> on failure.
///
///
/// returns:
/// A cancellable FlybitsRequest or nil if the user is unauthenticated.
+ (FlybitsRequest * _Nullable)getAllRelevantContentWith:(ContentQuery * _Nullable)query completion:(void (^ _Nonnull)(NSArray<Content *> * _Nullable, Pager * _Nullable, NSError * _Nullable))completion;
/// The <code>getAllInstances</code> method is responsible for fetching all content instances.
/// This method does not request or fill in <code>ContentData</code> associated to <code>Content</code>.
/// \param query A <code>ContentQuery</code> object that describes the <code>ContentData</code> types that we can deserialize for, labels useful for selecting a subset of <code>Content</code> instances or providing additional categorical information and pager used for pagination of large array datasets.
///
/// \param completion A closure that returns a <code>Paged<Content></code> pagination response (default 500 objects) on success or an <code>NSError</code> on failure.
///
///
/// returns:
/// A cancellable FlybitsRequest or nil if the user is unauthenticated.
+ (FlybitsRequest * _Nullable)getAllContentInstancesWith:(ContentQuery * _Nullable)query completion:(void (^ _Nonnull)(NSArray<Content *> * _Nullable, Pager * _Nullable, NSError * _Nullable))completion;
/// Gets all content data from an instance of <code>Content</code> identified with <code>instanceId</code>.
/// \param query A <code>ContentDataQuery</code> object that describes the parent <code>Content</code> instance, key used for pagination (if necessary) and a pager.
///
/// \param completion A closure that returns a <code>Content</code> object on success or an <code>NSError</code> on failure.
///
///
/// returns:
/// A cancellable FlybitsRequest or nil if the user is unauthenticated.
+ (FlybitsRequest * _Nullable)getAllContentDataWith:(ContentDataQuery * _Nonnull)query completion:(void (^ _Nonnull)(NSArray<ContentData *> * _Nullable, Pager * _Nullable, NSError * _Nullable))completion;
/// A static function used to populate additional paged data for arrays defined within ContentData objects.
/// Example: Suppose a photo gallery content template has an object called <code>photos</code> defined as a <code>Paged<T: ContentData></code> class type (Note: this will be an array object as defined in the Developer Portal website).
/// <code>gallery</code> is a content data object and <code>photos</code> is a property on <code>gallery</code>. Provide the variable <code>gallery</code> for <code>contentData</code>, “photos” as the <code>key</code>, and <code>photos.pager</code> as the pager.
/// Usage:
/// let contentDataQuery = ContentDataQuery(instanceIdentifier: id, key: PhotoGallery.Constant.photos, pager: photoGallery.pager)
/// _ = ContentData.getNext(contentData: gallery, query: contentDataQuery) { [weak self] nextGalleryContentData, error in
/// \param contentData The <code>ContentData</code> object that holds the <code>Paged<T></code> object you wish to receive more data for.
///
/// \param query A <code>ContentDataQuery</code> object that describes the parent <code>Content</code> instance, key used for pagination (if necessary) and a pager.
///
/// \param completion A closure that returns a <code>Content</code> object on success or an <code>NSError</code> on failure.
///
///
/// returns:
/// A cancellable FlybitsRequest or nil if the user is unauthenticated.
+ (FlybitsRequest * _Nullable)getNextContentDataWithContentData:(ContentData * _Nonnull)contentData query:(ContentDataQuery * _Nonnull)query completion:(void (^ _Nonnull)(ContentData * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class User;
@class NSCoder;

/// The <code>KernelScope</code> class is responsible for managing Content options when initializing
/// the Kernel SDK. This is a primary step to configure and define attributes that are required for
/// content processing.
SWIFT_CLASS("_TtC16FlybitsKernelSDK11KernelScope")
@interface KernelScope : NSObject <FlybitsScope>
/// A variable that tracks the current authorized state.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL authenticated;)
+ (BOOL)authenticated SWIFT_WARN_UNUSED_RESULT;
/// Scope name for the Context SDK
@property (nonatomic, readonly, copy) NSString * _Nonnull scopeName;
/// Gets called on successfully connecting to the IDP
- (void)onConnectedWithUser:(User * _Nonnull)user;
/// Gets called on disconnecting from the IDP
- (void)onDisconnectedWithJwtToken:(NSString * _Nonnull)jwtToken;
/// Gets called when a user account gets destroyed
- (void)onAccountDestroyedWithJwtToken:(NSString * _Nonnull)jwtToken;
/// A decoder initializer.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
/// An encoder.
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/// Get notified when cached data is parsed by the FlybitsSDK
- (void)onCachedDataRetrievedWithData:(id _Nonnull)data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>LocationContentData</code> class is responsible for defining base model
/// for parsing location based search content data.
SWIFT_CLASS("_TtC16FlybitsKernelSDK19LocationContentData")
@interface LocationContentData : NSObject
/// Distance in meters
@property (nonatomic) double distance;
/// Key matching the location content field
@property (nonatomic, copy) NSString * _Nonnull locationKey;
/// Location coordinates for the data
@property (nonatomic) CLLocationCoordinate2D coordinates;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// The <code>LocationQuery</code> class is responsible for defining the set of compatible
/// query parameters for a location based search query.
SWIFT_CLASS("_TtC16FlybitsKernelSDK13LocationQuery")
@interface LocationQuery : NSObject
/// Initializer for creating a location based search query.
/// \param key A search key for location based content data field.
///
/// \param location Latitude and Longitude coordinates for the location.
///
/// \param radius Radius in meters for the search distance.
///
/// \param templateId Template identifier for limiting the search to specific template.
///
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key location:(CLLocationCoordinate2D)location radius:(double)radius templateId:(NSString * _Nullable)templateId OBJC_DESIGNATED_INITIALIZER;
/// Creates a dictionary of URL parameters to be used when making any <code>Content</code> request.
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16FlybitsKernelSDK12SurveyAnswer")
@interface SurveyAnswer : ContentData
@property (nonatomic, readonly) NSInteger questionId;
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC16FlybitsKernelSDK13SurveyAnswers")
@interface SurveyAnswers : ContentData
@property (nonatomic, copy) NSString * _Nonnull surveyId;
- (nonnull instancetype)initWithSurveyId:(NSString * _Nonnull)surveyId answers:(NSArray<SurveyAnswer *> * _Nonnull)answers;
- (NSDictionary<NSString *, id> * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC16FlybitsKernelSDK14SurveyQuestion")
@interface SurveyQuestion : ContentData
@property (nonatomic) NSInteger questionId;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable metadata;
@end


SWIFT_CLASS("_TtC16FlybitsKernelSDK15SurveyQuestions")
@interface SurveyQuestions : ContentData
@end


SWIFT_CLASS("_TtC16FlybitsKernelSDK12SurveyResult")
@interface SurveyResult : ContentData
@end


SWIFT_CLASS("_TtC16FlybitsKernelSDK13SurveyResults")
@interface SurveyResults : ContentData
@property (nonatomic, copy) NSString * _Nonnull surveyId;
@property (nonatomic) NSInteger totalVotes;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
